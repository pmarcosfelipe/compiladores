Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> decSeq
Rule 2     dec -> varDec
Rule 3     dec -> ID LPAREN paramList RPAREN LCHAVES block RCHAVES
Rule 4     dec -> type ID LPAREN paramList RPAREN LCHAVES block RCHAVES
Rule 5     varDec -> type varSpecSeq PONTOVIRGULA
Rule 6     varSpec -> ID
Rule 7     varSpec -> ID IGUAL_ATRIB literal
Rule 8     varSpec -> ID LCOL NUMBER RCOL
Rule 9     varSpec -> ID LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES
Rule 10    type -> INT
Rule 11    type -> STRING
Rule 12    type -> BOOL
Rule 13    param -> type ID
Rule 14    param -> type ID LCOL RCOL
Rule 15    block -> varDecList stmtList
Rule 16    stmt -> ifStmt
Rule 17    stmt -> whileStmt
Rule 18    stmt -> forStmt
Rule 19    stmt -> breakStmt
Rule 20    stmt -> returnStmt
Rule 21    stmt -> readStmt
Rule 22    stmt -> writeStmt
Rule 23    stmt -> assign PONTOVIRGULA
Rule 24    stmt -> subCall PONTOVIRGULA
Rule 25    ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES
Rule 26    ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES
Rule 27    whileStmt -> WHILE LPAREN exp RPAREN LCHAVES block RCHAVES
Rule 28    forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES
Rule 29    breakStmt -> BREAK PONTOVIRGULA
Rule 30    readStmt -> READ var PONTOVIRGULA
Rule 31    writeStmt -> WRITE expList PONTOVIRGULA
Rule 32    returnStmt -> RETURN PONTOVIRGULA
Rule 33    returnStmt -> RETURN exp PONTOVIRGULA
Rule 34    subCall -> ID LPAREN expList RPAREN
Rule 35    assign -> var IGUAL_ATRIB exp
Rule 36    assign -> var INCREMENTO exp
Rule 37    assign -> var DECREMENTO exp
Rule 38    assign -> var MULT_ATRIB exp
Rule 39    assign -> var DIV_ATRIB exp
Rule 40    assign -> var MOD_IGUAL exp
Rule 41    var -> ID
Rule 42    var -> ID LCOL exp RCOL
Rule 43    exp -> exp PLUS exp
Rule 44    exp -> exp MINUS exp
Rule 45    exp -> exp TIMES exp
Rule 46    exp -> exp DIVIDE exp
Rule 47    exp -> exp MOD exp
Rule 48    exp -> exp IGUAL_COMP exp
Rule 49    exp -> exp DIFERENTE exp
Rule 50    exp -> exp MENOR exp
Rule 51    exp -> exp MENOR_IGUAL exp
Rule 52    exp -> exp MAIOR exp
Rule 53    exp -> exp MAIOR_IGUAL exp
Rule 54    exp -> exp OU_LOGICO exp
Rule 55    exp -> exp E_LOGICO exp
Rule 56    exp -> NEGACAO exp
Rule 57    exp -> INVERTESINAL exp
Rule 58    exp -> exp TERN_IF exp TERN_ELSE exp
Rule 59    exp -> subCall
Rule 60    exp -> var
Rule 61    exp -> literal
Rule 62    exp -> LPAREN exp RPAREN
Rule 63    literal -> NUMBER
Rule 64    literal -> CADEIA_CHAR
Rule 65    literal -> TRUE
Rule 66    literal -> FALSE
Rule 67    paramList -> paramSeq
Rule 68    paramList -> empty
Rule 69    paramSeq -> param VIRGULA paramSeq
Rule 70    paramSeq -> param
Rule 71    varDecList -> varDec varDecList
Rule 72    varDecList -> empty
Rule 73    varSpecSeq -> varSpec VIRGULA varSpecSeq
Rule 74    varSpecSeq -> varSpec
Rule 75    decSeq -> dec decSeq
Rule 76    decSeq -> dec
Rule 77    stmtList -> stmt stmtList
Rule 78    stmtList -> empty
Rule 79    literalSeq -> literal VIRGULA literalSeq
Rule 80    literalSeq -> literal
Rule 81    expList -> expSeq
Rule 82    expList -> empty
Rule 83    expSeq -> exp VIRGULA expSeq
Rule 84    expSeq -> exp
Rule 85    empty -> <empty>

Terminals, with rules where they appear

BOOL                 : 12
BREAK                : 29
CADEIA_CHAR          : 64
DECREMENTO           : 37
DIFERENTE            : 49
DIVIDE               : 46
DIV_ATRIB            : 39
ELSE                 : 26
E_LOGICO             : 55
FALSE                : 66
FOR                  : 28
ID                   : 3 4 6 7 8 9 13 14 34 41 42
IF                   : 25 26
IGUAL_ATRIB          : 7 9 35
IGUAL_COMP           : 48
INCREMENTO           : 36
INT                  : 10
INVERTESINAL         : 57
LCHAVES              : 3 4 9 25 26 26 27 28
LCOL                 : 8 9 14 42
LPAREN               : 3 4 25 26 27 28 34 62
MAIOR                : 52
MAIOR_IGUAL          : 53
MENOR                : 50
MENOR_IGUAL          : 51
MINUS                : 44
MOD                  : 47
MOD_IGUAL            : 40
MULT_ATRIB           : 38
NEGACAO              : 56
NUMBER               : 8 9 63
OU_LOGICO            : 54
PLUS                 : 43
PONTOVIRGULA         : 5 23 24 28 28 29 30 31 32 33
RCHAVES              : 3 4 9 25 26 26 27 28
RCOL                 : 8 9 14 42
READ                 : 30
RETURN               : 32 33
RPAREN               : 3 4 25 26 27 28 34 62
STRING               : 11
TERN_ELSE            : 58
TERN_IF              : 58
TIMES                : 45
TRUE                 : 65
VIRGULA              : 69 73 79 83
WHILE                : 27
WRITE                : 31
error                : 

Nonterminals, with rules where they appear

assign               : 23 28 28
block                : 3 4 25 26 26 27 28
breakStmt            : 19
dec                  : 75 76
decSeq               : 1 75
empty                : 68 72 78 82
exp                  : 25 26 27 28 33 35 36 37 38 39 40 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 57 58 58 58 62 83 84
expList              : 31 34
expSeq               : 81 83
forStmt              : 18
ifStmt               : 16
literal              : 7 61 79 80
literalSeq           : 9 79
param                : 69 70
paramList            : 3 4
paramSeq             : 67 69
program              : 0
readStmt             : 21
returnStmt           : 20
stmt                 : 77
stmtList             : 15 77
subCall              : 24 59
type                 : 4 5 13 14
var                  : 30 35 36 37 38 39 40 60
varDec               : 2 71
varDecList           : 15 71
varSpec              : 73 74
varSpecSeq           : 5 73
whileStmt            : 17
writeStmt            : 22

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . decSeq
    (75) decSeq -> . dec decSeq
    (76) decSeq -> . dec
    (2) dec -> . varDec
    (3) dec -> . ID LPAREN paramList RPAREN LCHAVES block RCHAVES
    (4) dec -> . type ID LPAREN paramList RPAREN LCHAVES block RCHAVES
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    ID              shift and go to state 9
    INT             shift and go to state 2
    STRING          shift and go to state 6
    BOOL            shift and go to state 5

    varDec                         shift and go to state 1
    decSeq                         shift and go to state 3
    program                        shift and go to state 4
    dec                            shift and go to state 7
    type                           shift and go to state 8

state 1

    (2) dec -> varDec .

    ID              reduce using rule 2 (dec -> varDec .)
    INT             reduce using rule 2 (dec -> varDec .)
    STRING          reduce using rule 2 (dec -> varDec .)
    BOOL            reduce using rule 2 (dec -> varDec .)
    $end            reduce using rule 2 (dec -> varDec .)


state 2

    (10) type -> INT .

    ID              reduce using rule 10 (type -> INT .)


state 3

    (1) program -> decSeq .

    $end            reduce using rule 1 (program -> decSeq .)


state 4

    (0) S' -> program .



state 5

    (12) type -> BOOL .

    ID              reduce using rule 12 (type -> BOOL .)


state 6

    (11) type -> STRING .

    ID              reduce using rule 11 (type -> STRING .)


state 7

    (75) decSeq -> dec . decSeq
    (76) decSeq -> dec .
    (75) decSeq -> . dec decSeq
    (76) decSeq -> . dec
    (2) dec -> . varDec
    (3) dec -> . ID LPAREN paramList RPAREN LCHAVES block RCHAVES
    (4) dec -> . type ID LPAREN paramList RPAREN LCHAVES block RCHAVES
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    $end            reduce using rule 76 (decSeq -> dec .)
    ID              shift and go to state 9
    INT             shift and go to state 2
    STRING          shift and go to state 6
    BOOL            shift and go to state 5

    varDec                         shift and go to state 1
    decSeq                         shift and go to state 10
    dec                            shift and go to state 7
    type                           shift and go to state 8

state 8

    (4) dec -> type . ID LPAREN paramList RPAREN LCHAVES block RCHAVES
    (5) varDec -> type . varSpecSeq PONTOVIRGULA
    (73) varSpecSeq -> . varSpec VIRGULA varSpecSeq
    (74) varSpecSeq -> . varSpec
    (6) varSpec -> . ID
    (7) varSpec -> . ID IGUAL_ATRIB literal
    (8) varSpec -> . ID LCOL NUMBER RCOL
    (9) varSpec -> . ID LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES

    ID              shift and go to state 13

    varSpec                        shift and go to state 11
    varSpecSeq                     shift and go to state 12

state 9

    (3) dec -> ID . LPAREN paramList RPAREN LCHAVES block RCHAVES

    LPAREN          shift and go to state 14


state 10

    (75) decSeq -> dec decSeq .

    $end            reduce using rule 75 (decSeq -> dec decSeq .)


state 11

    (73) varSpecSeq -> varSpec . VIRGULA varSpecSeq
    (74) varSpecSeq -> varSpec .

    VIRGULA         shift and go to state 15
    PONTOVIRGULA    reduce using rule 74 (varSpecSeq -> varSpec .)


state 12

    (5) varDec -> type varSpecSeq . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 16


state 13

    (4) dec -> type ID . LPAREN paramList RPAREN LCHAVES block RCHAVES
    (6) varSpec -> ID .
    (7) varSpec -> ID . IGUAL_ATRIB literal
    (8) varSpec -> ID . LCOL NUMBER RCOL
    (9) varSpec -> ID . LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES

    LPAREN          shift and go to state 19
    VIRGULA         reduce using rule 6 (varSpec -> ID .)
    PONTOVIRGULA    reduce using rule 6 (varSpec -> ID .)
    IGUAL_ATRIB     shift and go to state 18
    LCOL            shift and go to state 17


state 14

    (3) dec -> ID LPAREN . paramList RPAREN LCHAVES block RCHAVES
    (67) paramList -> . paramSeq
    (68) paramList -> . empty
    (69) paramSeq -> . param VIRGULA paramSeq
    (70) paramSeq -> . param
    (85) empty -> .
    (13) param -> . type ID
    (14) param -> . type ID LCOL RCOL
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    RPAREN          reduce using rule 85 (empty -> .)
    INT             shift and go to state 2
    STRING          shift and go to state 6
    BOOL            shift and go to state 5

    paramSeq                       shift and go to state 20
    param                          shift and go to state 22
    paramList                      shift and go to state 21
    type                           shift and go to state 24
    empty                          shift and go to state 23

state 15

    (73) varSpecSeq -> varSpec VIRGULA . varSpecSeq
    (73) varSpecSeq -> . varSpec VIRGULA varSpecSeq
    (74) varSpecSeq -> . varSpec
    (6) varSpec -> . ID
    (7) varSpec -> . ID IGUAL_ATRIB literal
    (8) varSpec -> . ID LCOL NUMBER RCOL
    (9) varSpec -> . ID LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES

    ID              shift and go to state 26

    varSpec                        shift and go to state 11
    varSpecSeq                     shift and go to state 25

state 16

    (5) varDec -> type varSpecSeq PONTOVIRGULA .

    INT             reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    STRING          reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    BOOL            reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    IF              reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    WHILE           reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    FOR             reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    BREAK           reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    RETURN          reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    READ            reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    WRITE           reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    ID              reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    RCHAVES         reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    $end            reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)


state 17

    (8) varSpec -> ID LCOL . NUMBER RCOL
    (9) varSpec -> ID LCOL . NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES

    NUMBER          shift and go to state 27


state 18

    (7) varSpec -> ID IGUAL_ATRIB . literal
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    literal                        shift and go to state 30

state 19

    (4) dec -> type ID LPAREN . paramList RPAREN LCHAVES block RCHAVES
    (67) paramList -> . paramSeq
    (68) paramList -> . empty
    (69) paramSeq -> . param VIRGULA paramSeq
    (70) paramSeq -> . param
    (85) empty -> .
    (13) param -> . type ID
    (14) param -> . type ID LCOL RCOL
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    RPAREN          reduce using rule 85 (empty -> .)
    INT             shift and go to state 2
    STRING          shift and go to state 6
    BOOL            shift and go to state 5

    paramSeq                       shift and go to state 20
    param                          shift and go to state 22
    paramList                      shift and go to state 33
    type                           shift and go to state 24
    empty                          shift and go to state 23

state 20

    (67) paramList -> paramSeq .

    RPAREN          reduce using rule 67 (paramList -> paramSeq .)


state 21

    (3) dec -> ID LPAREN paramList . RPAREN LCHAVES block RCHAVES

    RPAREN          shift and go to state 34


state 22

    (69) paramSeq -> param . VIRGULA paramSeq
    (70) paramSeq -> param .

    VIRGULA         shift and go to state 35
    RPAREN          reduce using rule 70 (paramSeq -> param .)


state 23

    (68) paramList -> empty .

    RPAREN          reduce using rule 68 (paramList -> empty .)


state 24

    (13) param -> type . ID
    (14) param -> type . ID LCOL RCOL

    ID              shift and go to state 36


state 25

    (73) varSpecSeq -> varSpec VIRGULA varSpecSeq .

    PONTOVIRGULA    reduce using rule 73 (varSpecSeq -> varSpec VIRGULA varSpecSeq .)


state 26

    (6) varSpec -> ID .
    (7) varSpec -> ID . IGUAL_ATRIB literal
    (8) varSpec -> ID . LCOL NUMBER RCOL
    (9) varSpec -> ID . LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES

    VIRGULA         reduce using rule 6 (varSpec -> ID .)
    PONTOVIRGULA    reduce using rule 6 (varSpec -> ID .)
    IGUAL_ATRIB     shift and go to state 18
    LCOL            shift and go to state 17


state 27

    (8) varSpec -> ID LCOL NUMBER . RCOL
    (9) varSpec -> ID LCOL NUMBER . RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES

    RCOL            shift and go to state 37


state 28

    (66) literal -> FALSE .

    PLUS            reduce using rule 66 (literal -> FALSE .)
    MINUS           reduce using rule 66 (literal -> FALSE .)
    TIMES           reduce using rule 66 (literal -> FALSE .)
    DIVIDE          reduce using rule 66 (literal -> FALSE .)
    MOD             reduce using rule 66 (literal -> FALSE .)
    IGUAL_COMP      reduce using rule 66 (literal -> FALSE .)
    DIFERENTE       reduce using rule 66 (literal -> FALSE .)
    MENOR           reduce using rule 66 (literal -> FALSE .)
    MENOR_IGUAL     reduce using rule 66 (literal -> FALSE .)
    MAIOR           reduce using rule 66 (literal -> FALSE .)
    MAIOR_IGUAL     reduce using rule 66 (literal -> FALSE .)
    OU_LOGICO       reduce using rule 66 (literal -> FALSE .)
    E_LOGICO        reduce using rule 66 (literal -> FALSE .)
    TERN_IF         reduce using rule 66 (literal -> FALSE .)
    PONTOVIRGULA    reduce using rule 66 (literal -> FALSE .)
    VIRGULA         reduce using rule 66 (literal -> FALSE .)
    RPAREN          reduce using rule 66 (literal -> FALSE .)
    RCOL            reduce using rule 66 (literal -> FALSE .)
    TERN_ELSE       reduce using rule 66 (literal -> FALSE .)
    RCHAVES         reduce using rule 66 (literal -> FALSE .)


state 29

    (63) literal -> NUMBER .

    PLUS            reduce using rule 63 (literal -> NUMBER .)
    MINUS           reduce using rule 63 (literal -> NUMBER .)
    TIMES           reduce using rule 63 (literal -> NUMBER .)
    DIVIDE          reduce using rule 63 (literal -> NUMBER .)
    MOD             reduce using rule 63 (literal -> NUMBER .)
    IGUAL_COMP      reduce using rule 63 (literal -> NUMBER .)
    DIFERENTE       reduce using rule 63 (literal -> NUMBER .)
    MENOR           reduce using rule 63 (literal -> NUMBER .)
    MENOR_IGUAL     reduce using rule 63 (literal -> NUMBER .)
    MAIOR           reduce using rule 63 (literal -> NUMBER .)
    MAIOR_IGUAL     reduce using rule 63 (literal -> NUMBER .)
    OU_LOGICO       reduce using rule 63 (literal -> NUMBER .)
    E_LOGICO        reduce using rule 63 (literal -> NUMBER .)
    TERN_IF         reduce using rule 63 (literal -> NUMBER .)
    PONTOVIRGULA    reduce using rule 63 (literal -> NUMBER .)
    VIRGULA         reduce using rule 63 (literal -> NUMBER .)
    RPAREN          reduce using rule 63 (literal -> NUMBER .)
    RCOL            reduce using rule 63 (literal -> NUMBER .)
    TERN_ELSE       reduce using rule 63 (literal -> NUMBER .)
    RCHAVES         reduce using rule 63 (literal -> NUMBER .)


state 30

    (7) varSpec -> ID IGUAL_ATRIB literal .

    VIRGULA         reduce using rule 7 (varSpec -> ID IGUAL_ATRIB literal .)
    PONTOVIRGULA    reduce using rule 7 (varSpec -> ID IGUAL_ATRIB literal .)


state 31

    (64) literal -> CADEIA_CHAR .

    PLUS            reduce using rule 64 (literal -> CADEIA_CHAR .)
    MINUS           reduce using rule 64 (literal -> CADEIA_CHAR .)
    TIMES           reduce using rule 64 (literal -> CADEIA_CHAR .)
    DIVIDE          reduce using rule 64 (literal -> CADEIA_CHAR .)
    MOD             reduce using rule 64 (literal -> CADEIA_CHAR .)
    IGUAL_COMP      reduce using rule 64 (literal -> CADEIA_CHAR .)
    DIFERENTE       reduce using rule 64 (literal -> CADEIA_CHAR .)
    MENOR           reduce using rule 64 (literal -> CADEIA_CHAR .)
    MENOR_IGUAL     reduce using rule 64 (literal -> CADEIA_CHAR .)
    MAIOR           reduce using rule 64 (literal -> CADEIA_CHAR .)
    MAIOR_IGUAL     reduce using rule 64 (literal -> CADEIA_CHAR .)
    OU_LOGICO       reduce using rule 64 (literal -> CADEIA_CHAR .)
    E_LOGICO        reduce using rule 64 (literal -> CADEIA_CHAR .)
    TERN_IF         reduce using rule 64 (literal -> CADEIA_CHAR .)
    PONTOVIRGULA    reduce using rule 64 (literal -> CADEIA_CHAR .)
    VIRGULA         reduce using rule 64 (literal -> CADEIA_CHAR .)
    RPAREN          reduce using rule 64 (literal -> CADEIA_CHAR .)
    RCOL            reduce using rule 64 (literal -> CADEIA_CHAR .)
    TERN_ELSE       reduce using rule 64 (literal -> CADEIA_CHAR .)
    RCHAVES         reduce using rule 64 (literal -> CADEIA_CHAR .)


state 32

    (65) literal -> TRUE .

    PLUS            reduce using rule 65 (literal -> TRUE .)
    MINUS           reduce using rule 65 (literal -> TRUE .)
    TIMES           reduce using rule 65 (literal -> TRUE .)
    DIVIDE          reduce using rule 65 (literal -> TRUE .)
    MOD             reduce using rule 65 (literal -> TRUE .)
    IGUAL_COMP      reduce using rule 65 (literal -> TRUE .)
    DIFERENTE       reduce using rule 65 (literal -> TRUE .)
    MENOR           reduce using rule 65 (literal -> TRUE .)
    MENOR_IGUAL     reduce using rule 65 (literal -> TRUE .)
    MAIOR           reduce using rule 65 (literal -> TRUE .)
    MAIOR_IGUAL     reduce using rule 65 (literal -> TRUE .)
    OU_LOGICO       reduce using rule 65 (literal -> TRUE .)
    E_LOGICO        reduce using rule 65 (literal -> TRUE .)
    TERN_IF         reduce using rule 65 (literal -> TRUE .)
    PONTOVIRGULA    reduce using rule 65 (literal -> TRUE .)
    VIRGULA         reduce using rule 65 (literal -> TRUE .)
    RPAREN          reduce using rule 65 (literal -> TRUE .)
    RCOL            reduce using rule 65 (literal -> TRUE .)
    TERN_ELSE       reduce using rule 65 (literal -> TRUE .)
    RCHAVES         reduce using rule 65 (literal -> TRUE .)


state 33

    (4) dec -> type ID LPAREN paramList . RPAREN LCHAVES block RCHAVES

    RPAREN          shift and go to state 38


state 34

    (3) dec -> ID LPAREN paramList RPAREN . LCHAVES block RCHAVES

    LCHAVES         shift and go to state 39


state 35

    (69) paramSeq -> param VIRGULA . paramSeq
    (69) paramSeq -> . param VIRGULA paramSeq
    (70) paramSeq -> . param
    (13) param -> . type ID
    (14) param -> . type ID LCOL RCOL
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    INT             shift and go to state 2
    STRING          shift and go to state 6
    BOOL            shift and go to state 5

    paramSeq                       shift and go to state 40
    type                           shift and go to state 24
    param                          shift and go to state 22

state 36

    (13) param -> type ID .
    (14) param -> type ID . LCOL RCOL

    VIRGULA         reduce using rule 13 (param -> type ID .)
    RPAREN          reduce using rule 13 (param -> type ID .)
    LCOL            shift and go to state 41


state 37

    (8) varSpec -> ID LCOL NUMBER RCOL .
    (9) varSpec -> ID LCOL NUMBER RCOL . IGUAL_ATRIB LCHAVES literalSeq RCHAVES

    VIRGULA         reduce using rule 8 (varSpec -> ID LCOL NUMBER RCOL .)
    PONTOVIRGULA    reduce using rule 8 (varSpec -> ID LCOL NUMBER RCOL .)
    IGUAL_ATRIB     shift and go to state 42


state 38

    (4) dec -> type ID LPAREN paramList RPAREN . LCHAVES block RCHAVES

    LCHAVES         shift and go to state 43


state 39

    (3) dec -> ID LPAREN paramList RPAREN LCHAVES . block RCHAVES
    (15) block -> . varDecList stmtList
    (71) varDecList -> . varDec varDecList
    (72) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (85) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    FOR             reduce using rule 85 (empty -> .)
    BREAK           reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    WRITE           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    RCHAVES         reduce using rule 85 (empty -> .)
    INT             shift and go to state 2
    STRING          shift and go to state 6
    BOOL            shift and go to state 5

    varDec                         shift and go to state 44
    block                          shift and go to state 48
    type                           shift and go to state 47
    empty                          shift and go to state 45
    varDecList                     shift and go to state 46

state 40

    (69) paramSeq -> param VIRGULA paramSeq .

    RPAREN          reduce using rule 69 (paramSeq -> param VIRGULA paramSeq .)


state 41

    (14) param -> type ID LCOL . RCOL

    RCOL            shift and go to state 49


state 42

    (9) varSpec -> ID LCOL NUMBER RCOL IGUAL_ATRIB . LCHAVES literalSeq RCHAVES

    LCHAVES         shift and go to state 50


state 43

    (4) dec -> type ID LPAREN paramList RPAREN LCHAVES . block RCHAVES
    (15) block -> . varDecList stmtList
    (71) varDecList -> . varDec varDecList
    (72) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (85) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    FOR             reduce using rule 85 (empty -> .)
    BREAK           reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    WRITE           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    RCHAVES         reduce using rule 85 (empty -> .)
    INT             shift and go to state 2
    STRING          shift and go to state 6
    BOOL            shift and go to state 5

    varDec                         shift and go to state 44
    empty                          shift and go to state 45
    type                           shift and go to state 47
    block                          shift and go to state 51
    varDecList                     shift and go to state 46

state 44

    (71) varDecList -> varDec . varDecList
    (71) varDecList -> . varDec varDecList
    (72) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (85) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    FOR             reduce using rule 85 (empty -> .)
    BREAK           reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    WRITE           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    RCHAVES         reduce using rule 85 (empty -> .)
    INT             shift and go to state 2
    STRING          shift and go to state 6
    BOOL            shift and go to state 5

    varDec                         shift and go to state 44
    type                           shift and go to state 47
    empty                          shift and go to state 45
    varDecList                     shift and go to state 52

state 45

    (72) varDecList -> empty .

    IF              reduce using rule 72 (varDecList -> empty .)
    WHILE           reduce using rule 72 (varDecList -> empty .)
    FOR             reduce using rule 72 (varDecList -> empty .)
    BREAK           reduce using rule 72 (varDecList -> empty .)
    RETURN          reduce using rule 72 (varDecList -> empty .)
    READ            reduce using rule 72 (varDecList -> empty .)
    WRITE           reduce using rule 72 (varDecList -> empty .)
    ID              reduce using rule 72 (varDecList -> empty .)
    RCHAVES         reduce using rule 72 (varDecList -> empty .)


state 46

    (15) block -> varDecList . stmtList
    (77) stmtList -> . stmt stmtList
    (78) stmtList -> . empty
    (16) stmt -> . ifStmt
    (17) stmt -> . whileStmt
    (18) stmt -> . forStmt
    (19) stmt -> . breakStmt
    (20) stmt -> . returnStmt
    (21) stmt -> . readStmt
    (22) stmt -> . writeStmt
    (23) stmt -> . assign PONTOVIRGULA
    (24) stmt -> . subCall PONTOVIRGULA
    (85) empty -> .
    (25) ifStmt -> . IF LPAREN exp RPAREN LCHAVES block RCHAVES
    (26) ifStmt -> . IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES
    (27) whileStmt -> . WHILE LPAREN exp RPAREN LCHAVES block RCHAVES
    (28) forStmt -> . FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES
    (29) breakStmt -> . BREAK PONTOVIRGULA
    (32) returnStmt -> . RETURN PONTOVIRGULA
    (33) returnStmt -> . RETURN exp PONTOVIRGULA
    (30) readStmt -> . READ var PONTOVIRGULA
    (31) writeStmt -> . WRITE expList PONTOVIRGULA
    (35) assign -> . var IGUAL_ATRIB exp
    (36) assign -> . var INCREMENTO exp
    (37) assign -> . var DECREMENTO exp
    (38) assign -> . var MULT_ATRIB exp
    (39) assign -> . var DIV_ATRIB exp
    (40) assign -> . var MOD_IGUAL exp
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL

    RCHAVES         reduce using rule 85 (empty -> .)
    IF              shift and go to state 67
    WHILE           shift and go to state 56
    FOR             shift and go to state 61
    BREAK           shift and go to state 70
    RETURN          shift and go to state 53
    READ            shift and go to state 55
    WRITE           shift and go to state 64
    ID              shift and go to state 66

    writeStmt                      shift and go to state 68
    readStmt                       shift and go to state 57
    breakStmt                      shift and go to state 62
    subCall                        shift and go to state 54
    stmt                           shift and go to state 63
    assign                         shift and go to state 73
    whileStmt                      shift and go to state 58
    forStmt                        shift and go to state 71
    stmtList                       shift and go to state 72
    var                            shift and go to state 59
    returnStmt                     shift and go to state 65
    ifStmt                         shift and go to state 69
    empty                          shift and go to state 60

state 47

    (5) varDec -> type . varSpecSeq PONTOVIRGULA
    (73) varSpecSeq -> . varSpec VIRGULA varSpecSeq
    (74) varSpecSeq -> . varSpec
    (6) varSpec -> . ID
    (7) varSpec -> . ID IGUAL_ATRIB literal
    (8) varSpec -> . ID LCOL NUMBER RCOL
    (9) varSpec -> . ID LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES

    ID              shift and go to state 26

    varSpecSeq                     shift and go to state 12
    varSpec                        shift and go to state 11

state 48

    (3) dec -> ID LPAREN paramList RPAREN LCHAVES block . RCHAVES

    RCHAVES         shift and go to state 74


state 49

    (14) param -> type ID LCOL RCOL .

    VIRGULA         reduce using rule 14 (param -> type ID LCOL RCOL .)
    RPAREN          reduce using rule 14 (param -> type ID LCOL RCOL .)


state 50

    (9) varSpec -> ID LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES . literalSeq RCHAVES
    (79) literalSeq -> . literal VIRGULA literalSeq
    (80) literalSeq -> . literal
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    literalSeq                     shift and go to state 75
    literal                        shift and go to state 76

state 51

    (4) dec -> type ID LPAREN paramList RPAREN LCHAVES block . RCHAVES

    RCHAVES         shift and go to state 77


state 52

    (71) varDecList -> varDec varDecList .

    IF              reduce using rule 71 (varDecList -> varDec varDecList .)
    WHILE           reduce using rule 71 (varDecList -> varDec varDecList .)
    FOR             reduce using rule 71 (varDecList -> varDec varDecList .)
    BREAK           reduce using rule 71 (varDecList -> varDec varDecList .)
    RETURN          reduce using rule 71 (varDecList -> varDec varDecList .)
    READ            reduce using rule 71 (varDecList -> varDec varDecList .)
    WRITE           reduce using rule 71 (varDecList -> varDec varDecList .)
    ID              reduce using rule 71 (varDecList -> varDec varDecList .)
    RCHAVES         reduce using rule 71 (varDecList -> varDec varDecList .)


state 53

    (32) returnStmt -> RETURN . PONTOVIRGULA
    (33) returnStmt -> RETURN . exp PONTOVIRGULA
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PONTOVIRGULA    shift and go to state 82
    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 85

state 54

    (24) stmt -> subCall . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 86


state 55

    (30) readStmt -> READ . var PONTOVIRGULA
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL

    ID              shift and go to state 88

    var                            shift and go to state 87

state 56

    (27) whileStmt -> WHILE . LPAREN exp RPAREN LCHAVES block RCHAVES

    LPAREN          shift and go to state 89


state 57

    (21) stmt -> readStmt .

    IF              reduce using rule 21 (stmt -> readStmt .)
    WHILE           reduce using rule 21 (stmt -> readStmt .)
    FOR             reduce using rule 21 (stmt -> readStmt .)
    BREAK           reduce using rule 21 (stmt -> readStmt .)
    RETURN          reduce using rule 21 (stmt -> readStmt .)
    READ            reduce using rule 21 (stmt -> readStmt .)
    WRITE           reduce using rule 21 (stmt -> readStmt .)
    ID              reduce using rule 21 (stmt -> readStmt .)
    RCHAVES         reduce using rule 21 (stmt -> readStmt .)


state 58

    (17) stmt -> whileStmt .

    IF              reduce using rule 17 (stmt -> whileStmt .)
    WHILE           reduce using rule 17 (stmt -> whileStmt .)
    FOR             reduce using rule 17 (stmt -> whileStmt .)
    BREAK           reduce using rule 17 (stmt -> whileStmt .)
    RETURN          reduce using rule 17 (stmt -> whileStmt .)
    READ            reduce using rule 17 (stmt -> whileStmt .)
    WRITE           reduce using rule 17 (stmt -> whileStmt .)
    ID              reduce using rule 17 (stmt -> whileStmt .)
    RCHAVES         reduce using rule 17 (stmt -> whileStmt .)


state 59

    (35) assign -> var . IGUAL_ATRIB exp
    (36) assign -> var . INCREMENTO exp
    (37) assign -> var . DECREMENTO exp
    (38) assign -> var . MULT_ATRIB exp
    (39) assign -> var . DIV_ATRIB exp
    (40) assign -> var . MOD_IGUAL exp

    IGUAL_ATRIB     shift and go to state 91
    INCREMENTO      shift and go to state 93
    DECREMENTO      shift and go to state 95
    MULT_ATRIB      shift and go to state 94
    DIV_ATRIB       shift and go to state 90
    MOD_IGUAL       shift and go to state 92


state 60

    (78) stmtList -> empty .

    RCHAVES         reduce using rule 78 (stmtList -> empty .)


state 61

    (28) forStmt -> FOR . LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES

    LPAREN          shift and go to state 96


state 62

    (19) stmt -> breakStmt .

    IF              reduce using rule 19 (stmt -> breakStmt .)
    WHILE           reduce using rule 19 (stmt -> breakStmt .)
    FOR             reduce using rule 19 (stmt -> breakStmt .)
    BREAK           reduce using rule 19 (stmt -> breakStmt .)
    RETURN          reduce using rule 19 (stmt -> breakStmt .)
    READ            reduce using rule 19 (stmt -> breakStmt .)
    WRITE           reduce using rule 19 (stmt -> breakStmt .)
    ID              reduce using rule 19 (stmt -> breakStmt .)
    RCHAVES         reduce using rule 19 (stmt -> breakStmt .)


state 63

    (77) stmtList -> stmt . stmtList
    (77) stmtList -> . stmt stmtList
    (78) stmtList -> . empty
    (16) stmt -> . ifStmt
    (17) stmt -> . whileStmt
    (18) stmt -> . forStmt
    (19) stmt -> . breakStmt
    (20) stmt -> . returnStmt
    (21) stmt -> . readStmt
    (22) stmt -> . writeStmt
    (23) stmt -> . assign PONTOVIRGULA
    (24) stmt -> . subCall PONTOVIRGULA
    (85) empty -> .
    (25) ifStmt -> . IF LPAREN exp RPAREN LCHAVES block RCHAVES
    (26) ifStmt -> . IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES
    (27) whileStmt -> . WHILE LPAREN exp RPAREN LCHAVES block RCHAVES
    (28) forStmt -> . FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES
    (29) breakStmt -> . BREAK PONTOVIRGULA
    (32) returnStmt -> . RETURN PONTOVIRGULA
    (33) returnStmt -> . RETURN exp PONTOVIRGULA
    (30) readStmt -> . READ var PONTOVIRGULA
    (31) writeStmt -> . WRITE expList PONTOVIRGULA
    (35) assign -> . var IGUAL_ATRIB exp
    (36) assign -> . var INCREMENTO exp
    (37) assign -> . var DECREMENTO exp
    (38) assign -> . var MULT_ATRIB exp
    (39) assign -> . var DIV_ATRIB exp
    (40) assign -> . var MOD_IGUAL exp
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL

    RCHAVES         reduce using rule 85 (empty -> .)
    IF              shift and go to state 67
    WHILE           shift and go to state 56
    FOR             shift and go to state 61
    BREAK           shift and go to state 70
    RETURN          shift and go to state 53
    READ            shift and go to state 55
    WRITE           shift and go to state 64
    ID              shift and go to state 66

    writeStmt                      shift and go to state 68
    readStmt                       shift and go to state 57
    breakStmt                      shift and go to state 62
    stmt                           shift and go to state 63
    assign                         shift and go to state 73
    whileStmt                      shift and go to state 58
    forStmt                        shift and go to state 71
    stmtList                       shift and go to state 97
    var                            shift and go to state 59
    returnStmt                     shift and go to state 65
    ifStmt                         shift and go to state 69
    empty                          shift and go to state 60
    subCall                        shift and go to state 54

state 64

    (31) writeStmt -> WRITE . expList PONTOVIRGULA
    (81) expList -> . expSeq
    (82) expList -> . empty
    (83) expSeq -> . exp VIRGULA expSeq
    (84) expSeq -> . exp
    (85) empty -> .
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PONTOVIRGULA    reduce using rule 85 (empty -> .)
    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    subCall                        shift and go to state 78
    literal                        shift and go to state 79
    expSeq                         shift and go to state 98
    exp                            shift and go to state 101
    var                            shift and go to state 80
    expList                        shift and go to state 100
    empty                          shift and go to state 99

state 65

    (20) stmt -> returnStmt .

    IF              reduce using rule 20 (stmt -> returnStmt .)
    WHILE           reduce using rule 20 (stmt -> returnStmt .)
    FOR             reduce using rule 20 (stmt -> returnStmt .)
    BREAK           reduce using rule 20 (stmt -> returnStmt .)
    RETURN          reduce using rule 20 (stmt -> returnStmt .)
    READ            reduce using rule 20 (stmt -> returnStmt .)
    WRITE           reduce using rule 20 (stmt -> returnStmt .)
    ID              reduce using rule 20 (stmt -> returnStmt .)
    RCHAVES         reduce using rule 20 (stmt -> returnStmt .)


state 66

    (34) subCall -> ID . LPAREN expList RPAREN
    (41) var -> ID .
    (42) var -> ID . LCOL exp RCOL

    LPAREN          shift and go to state 102
    IGUAL_ATRIB     reduce using rule 41 (var -> ID .)
    INCREMENTO      reduce using rule 41 (var -> ID .)
    DECREMENTO      reduce using rule 41 (var -> ID .)
    MULT_ATRIB      reduce using rule 41 (var -> ID .)
    DIV_ATRIB       reduce using rule 41 (var -> ID .)
    MOD_IGUAL       reduce using rule 41 (var -> ID .)
    PONTOVIRGULA    reduce using rule 41 (var -> ID .)
    PLUS            reduce using rule 41 (var -> ID .)
    MINUS           reduce using rule 41 (var -> ID .)
    TIMES           reduce using rule 41 (var -> ID .)
    DIVIDE          reduce using rule 41 (var -> ID .)
    MOD             reduce using rule 41 (var -> ID .)
    IGUAL_COMP      reduce using rule 41 (var -> ID .)
    DIFERENTE       reduce using rule 41 (var -> ID .)
    MENOR           reduce using rule 41 (var -> ID .)
    MENOR_IGUAL     reduce using rule 41 (var -> ID .)
    MAIOR           reduce using rule 41 (var -> ID .)
    MAIOR_IGUAL     reduce using rule 41 (var -> ID .)
    OU_LOGICO       reduce using rule 41 (var -> ID .)
    E_LOGICO        reduce using rule 41 (var -> ID .)
    TERN_IF         reduce using rule 41 (var -> ID .)
    VIRGULA         reduce using rule 41 (var -> ID .)
    RPAREN          reduce using rule 41 (var -> ID .)
    RCOL            reduce using rule 41 (var -> ID .)
    TERN_ELSE       reduce using rule 41 (var -> ID .)
    LCOL            shift and go to state 103


state 67

    (25) ifStmt -> IF . LPAREN exp RPAREN LCHAVES block RCHAVES
    (26) ifStmt -> IF . LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES

    LPAREN          shift and go to state 104


state 68

    (22) stmt -> writeStmt .

    IF              reduce using rule 22 (stmt -> writeStmt .)
    WHILE           reduce using rule 22 (stmt -> writeStmt .)
    FOR             reduce using rule 22 (stmt -> writeStmt .)
    BREAK           reduce using rule 22 (stmt -> writeStmt .)
    RETURN          reduce using rule 22 (stmt -> writeStmt .)
    READ            reduce using rule 22 (stmt -> writeStmt .)
    WRITE           reduce using rule 22 (stmt -> writeStmt .)
    ID              reduce using rule 22 (stmt -> writeStmt .)
    RCHAVES         reduce using rule 22 (stmt -> writeStmt .)


state 69

    (16) stmt -> ifStmt .

    IF              reduce using rule 16 (stmt -> ifStmt .)
    WHILE           reduce using rule 16 (stmt -> ifStmt .)
    FOR             reduce using rule 16 (stmt -> ifStmt .)
    BREAK           reduce using rule 16 (stmt -> ifStmt .)
    RETURN          reduce using rule 16 (stmt -> ifStmt .)
    READ            reduce using rule 16 (stmt -> ifStmt .)
    WRITE           reduce using rule 16 (stmt -> ifStmt .)
    ID              reduce using rule 16 (stmt -> ifStmt .)
    RCHAVES         reduce using rule 16 (stmt -> ifStmt .)


state 70

    (29) breakStmt -> BREAK . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 105


state 71

    (18) stmt -> forStmt .

    IF              reduce using rule 18 (stmt -> forStmt .)
    WHILE           reduce using rule 18 (stmt -> forStmt .)
    FOR             reduce using rule 18 (stmt -> forStmt .)
    BREAK           reduce using rule 18 (stmt -> forStmt .)
    RETURN          reduce using rule 18 (stmt -> forStmt .)
    READ            reduce using rule 18 (stmt -> forStmt .)
    WRITE           reduce using rule 18 (stmt -> forStmt .)
    ID              reduce using rule 18 (stmt -> forStmt .)
    RCHAVES         reduce using rule 18 (stmt -> forStmt .)


state 72

    (15) block -> varDecList stmtList .

    RCHAVES         reduce using rule 15 (block -> varDecList stmtList .)


state 73

    (23) stmt -> assign . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 106


state 74

    (3) dec -> ID LPAREN paramList RPAREN LCHAVES block RCHAVES .

    ID              reduce using rule 3 (dec -> ID LPAREN paramList RPAREN LCHAVES block RCHAVES .)
    INT             reduce using rule 3 (dec -> ID LPAREN paramList RPAREN LCHAVES block RCHAVES .)
    STRING          reduce using rule 3 (dec -> ID LPAREN paramList RPAREN LCHAVES block RCHAVES .)
    BOOL            reduce using rule 3 (dec -> ID LPAREN paramList RPAREN LCHAVES block RCHAVES .)
    $end            reduce using rule 3 (dec -> ID LPAREN paramList RPAREN LCHAVES block RCHAVES .)


state 75

    (9) varSpec -> ID LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq . RCHAVES

    RCHAVES         shift and go to state 107


state 76

    (79) literalSeq -> literal . VIRGULA literalSeq
    (80) literalSeq -> literal .

    VIRGULA         shift and go to state 108
    RCHAVES         reduce using rule 80 (literalSeq -> literal .)


state 77

    (4) dec -> type ID LPAREN paramList RPAREN LCHAVES block RCHAVES .

    ID              reduce using rule 4 (dec -> type ID LPAREN paramList RPAREN LCHAVES block RCHAVES .)
    INT             reduce using rule 4 (dec -> type ID LPAREN paramList RPAREN LCHAVES block RCHAVES .)
    STRING          reduce using rule 4 (dec -> type ID LPAREN paramList RPAREN LCHAVES block RCHAVES .)
    BOOL            reduce using rule 4 (dec -> type ID LPAREN paramList RPAREN LCHAVES block RCHAVES .)
    $end            reduce using rule 4 (dec -> type ID LPAREN paramList RPAREN LCHAVES block RCHAVES .)


state 78

    (59) exp -> subCall .

    PLUS            reduce using rule 59 (exp -> subCall .)
    MINUS           reduce using rule 59 (exp -> subCall .)
    TIMES           reduce using rule 59 (exp -> subCall .)
    DIVIDE          reduce using rule 59 (exp -> subCall .)
    MOD             reduce using rule 59 (exp -> subCall .)
    IGUAL_COMP      reduce using rule 59 (exp -> subCall .)
    DIFERENTE       reduce using rule 59 (exp -> subCall .)
    MENOR           reduce using rule 59 (exp -> subCall .)
    MENOR_IGUAL     reduce using rule 59 (exp -> subCall .)
    MAIOR           reduce using rule 59 (exp -> subCall .)
    MAIOR_IGUAL     reduce using rule 59 (exp -> subCall .)
    OU_LOGICO       reduce using rule 59 (exp -> subCall .)
    E_LOGICO        reduce using rule 59 (exp -> subCall .)
    TERN_IF         reduce using rule 59 (exp -> subCall .)
    PONTOVIRGULA    reduce using rule 59 (exp -> subCall .)
    VIRGULA         reduce using rule 59 (exp -> subCall .)
    RPAREN          reduce using rule 59 (exp -> subCall .)
    RCOL            reduce using rule 59 (exp -> subCall .)
    TERN_ELSE       reduce using rule 59 (exp -> subCall .)


state 79

    (61) exp -> literal .

    PLUS            reduce using rule 61 (exp -> literal .)
    MINUS           reduce using rule 61 (exp -> literal .)
    TIMES           reduce using rule 61 (exp -> literal .)
    DIVIDE          reduce using rule 61 (exp -> literal .)
    MOD             reduce using rule 61 (exp -> literal .)
    IGUAL_COMP      reduce using rule 61 (exp -> literal .)
    DIFERENTE       reduce using rule 61 (exp -> literal .)
    MENOR           reduce using rule 61 (exp -> literal .)
    MENOR_IGUAL     reduce using rule 61 (exp -> literal .)
    MAIOR           reduce using rule 61 (exp -> literal .)
    MAIOR_IGUAL     reduce using rule 61 (exp -> literal .)
    OU_LOGICO       reduce using rule 61 (exp -> literal .)
    E_LOGICO        reduce using rule 61 (exp -> literal .)
    TERN_IF         reduce using rule 61 (exp -> literal .)
    PONTOVIRGULA    reduce using rule 61 (exp -> literal .)
    VIRGULA         reduce using rule 61 (exp -> literal .)
    RPAREN          reduce using rule 61 (exp -> literal .)
    RCOL            reduce using rule 61 (exp -> literal .)
    TERN_ELSE       reduce using rule 61 (exp -> literal .)


state 80

    (60) exp -> var .

    PLUS            reduce using rule 60 (exp -> var .)
    MINUS           reduce using rule 60 (exp -> var .)
    TIMES           reduce using rule 60 (exp -> var .)
    DIVIDE          reduce using rule 60 (exp -> var .)
    MOD             reduce using rule 60 (exp -> var .)
    IGUAL_COMP      reduce using rule 60 (exp -> var .)
    DIFERENTE       reduce using rule 60 (exp -> var .)
    MENOR           reduce using rule 60 (exp -> var .)
    MENOR_IGUAL     reduce using rule 60 (exp -> var .)
    MAIOR           reduce using rule 60 (exp -> var .)
    MAIOR_IGUAL     reduce using rule 60 (exp -> var .)
    OU_LOGICO       reduce using rule 60 (exp -> var .)
    E_LOGICO        reduce using rule 60 (exp -> var .)
    TERN_IF         reduce using rule 60 (exp -> var .)
    PONTOVIRGULA    reduce using rule 60 (exp -> var .)
    VIRGULA         reduce using rule 60 (exp -> var .)
    RPAREN          reduce using rule 60 (exp -> var .)
    RCOL            reduce using rule 60 (exp -> var .)
    TERN_ELSE       reduce using rule 60 (exp -> var .)


state 81

    (57) exp -> INVERTESINAL . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 109

state 82

    (32) returnStmt -> RETURN PONTOVIRGULA .

    IF              reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    WHILE           reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    FOR             reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    BREAK           reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    RETURN          reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    READ            reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    WRITE           reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    ID              reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    RCHAVES         reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)


state 83

    (62) exp -> LPAREN . exp RPAREN
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 110

state 84

    (56) exp -> NEGACAO . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 111

state 85

    (33) returnStmt -> RETURN exp . PONTOVIRGULA
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    PONTOVIRGULA    shift and go to state 121
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115


state 86

    (24) stmt -> subCall PONTOVIRGULA .

    IF              reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    WHILE           reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    FOR             reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    BREAK           reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    RETURN          reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    READ            reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    WRITE           reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    ID              reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    RCHAVES         reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)


state 87

    (30) readStmt -> READ var . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 127


state 88

    (41) var -> ID .
    (42) var -> ID . LCOL exp RCOL

    IGUAL_ATRIB     reduce using rule 41 (var -> ID .)
    INCREMENTO      reduce using rule 41 (var -> ID .)
    DECREMENTO      reduce using rule 41 (var -> ID .)
    MULT_ATRIB      reduce using rule 41 (var -> ID .)
    DIV_ATRIB       reduce using rule 41 (var -> ID .)
    MOD_IGUAL       reduce using rule 41 (var -> ID .)
    PONTOVIRGULA    reduce using rule 41 (var -> ID .)
    LCOL            shift and go to state 103


state 89

    (27) whileStmt -> WHILE LPAREN . exp RPAREN LCHAVES block RCHAVES
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    subCall                        shift and go to state 78
    literal                        shift and go to state 79
    exp                            shift and go to state 128
    var                            shift and go to state 80

state 90

    (39) assign -> var DIV_ATRIB . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 129

state 91

    (35) assign -> var IGUAL_ATRIB . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 130

state 92

    (40) assign -> var MOD_IGUAL . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 131

state 93

    (36) assign -> var INCREMENTO . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 132

state 94

    (38) assign -> var MULT_ATRIB . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 133

state 95

    (37) assign -> var DECREMENTO . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 134

state 96

    (28) forStmt -> FOR LPAREN . assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES
    (35) assign -> . var IGUAL_ATRIB exp
    (36) assign -> . var INCREMENTO exp
    (37) assign -> . var DECREMENTO exp
    (38) assign -> . var MULT_ATRIB exp
    (39) assign -> . var DIV_ATRIB exp
    (40) assign -> . var MOD_IGUAL exp
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL

    ID              shift and go to state 88

    var                            shift and go to state 59
    assign                         shift and go to state 135

state 97

    (77) stmtList -> stmt stmtList .

    RCHAVES         reduce using rule 77 (stmtList -> stmt stmtList .)


state 98

    (81) expList -> expSeq .

    PONTOVIRGULA    reduce using rule 81 (expList -> expSeq .)
    RPAREN          reduce using rule 81 (expList -> expSeq .)


state 99

    (82) expList -> empty .

    PONTOVIRGULA    reduce using rule 82 (expList -> empty .)
    RPAREN          reduce using rule 82 (expList -> empty .)


state 100

    (31) writeStmt -> WRITE expList . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 136


state 101

    (83) expSeq -> exp . VIRGULA expSeq
    (84) expSeq -> exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    VIRGULA         shift and go to state 137
    RPAREN          reduce using rule 84 (expSeq -> exp .)
    PONTOVIRGULA    reduce using rule 84 (expSeq -> exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115


state 102

    (34) subCall -> ID LPAREN . expList RPAREN
    (81) expList -> . expSeq
    (82) expList -> . empty
    (83) expSeq -> . exp VIRGULA expSeq
    (84) expSeq -> . exp
    (85) empty -> .
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    RPAREN          reduce using rule 85 (empty -> .)
    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    subCall                        shift and go to state 78
    literal                        shift and go to state 79
    expSeq                         shift and go to state 98
    exp                            shift and go to state 101
    var                            shift and go to state 80
    expList                        shift and go to state 138
    empty                          shift and go to state 99

state 103

    (42) var -> ID LCOL . exp RCOL
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 139

state 104

    (25) ifStmt -> IF LPAREN . exp RPAREN LCHAVES block RCHAVES
    (26) ifStmt -> IF LPAREN . exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    subCall                        shift and go to state 78
    literal                        shift and go to state 79
    exp                            shift and go to state 140
    var                            shift and go to state 80

state 105

    (29) breakStmt -> BREAK PONTOVIRGULA .

    IF              reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    WHILE           reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    FOR             reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    BREAK           reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    RETURN          reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    READ            reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    WRITE           reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    ID              reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    RCHAVES         reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)


state 106

    (23) stmt -> assign PONTOVIRGULA .

    IF              reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    WHILE           reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    FOR             reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    BREAK           reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    RETURN          reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    READ            reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    WRITE           reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    ID              reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    RCHAVES         reduce using rule 23 (stmt -> assign PONTOVIRGULA .)


state 107

    (9) varSpec -> ID LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES .

    VIRGULA         reduce using rule 9 (varSpec -> ID LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES .)
    PONTOVIRGULA    reduce using rule 9 (varSpec -> ID LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES .)


state 108

    (79) literalSeq -> literal VIRGULA . literalSeq
    (79) literalSeq -> . literal VIRGULA literalSeq
    (80) literalSeq -> . literal
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    literalSeq                     shift and go to state 141
    literal                        shift and go to state 76

state 109

    (57) exp -> INVERTESINAL exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    PLUS            reduce using rule 57 (exp -> INVERTESINAL exp .)
    MINUS           reduce using rule 57 (exp -> INVERTESINAL exp .)
    TIMES           reduce using rule 57 (exp -> INVERTESINAL exp .)
    DIVIDE          reduce using rule 57 (exp -> INVERTESINAL exp .)
    MOD             reduce using rule 57 (exp -> INVERTESINAL exp .)
    IGUAL_COMP      reduce using rule 57 (exp -> INVERTESINAL exp .)
    DIFERENTE       reduce using rule 57 (exp -> INVERTESINAL exp .)
    MENOR           reduce using rule 57 (exp -> INVERTESINAL exp .)
    MENOR_IGUAL     reduce using rule 57 (exp -> INVERTESINAL exp .)
    MAIOR           reduce using rule 57 (exp -> INVERTESINAL exp .)
    MAIOR_IGUAL     reduce using rule 57 (exp -> INVERTESINAL exp .)
    OU_LOGICO       reduce using rule 57 (exp -> INVERTESINAL exp .)
    E_LOGICO        reduce using rule 57 (exp -> INVERTESINAL exp .)
    TERN_IF         reduce using rule 57 (exp -> INVERTESINAL exp .)
    PONTOVIRGULA    reduce using rule 57 (exp -> INVERTESINAL exp .)
    VIRGULA         reduce using rule 57 (exp -> INVERTESINAL exp .)
    RPAREN          reduce using rule 57 (exp -> INVERTESINAL exp .)
    RCOL            reduce using rule 57 (exp -> INVERTESINAL exp .)
    TERN_ELSE       reduce using rule 57 (exp -> INVERTESINAL exp .)

  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 124 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 126 ]
  ! MOD             [ shift and go to state 123 ]
  ! IGUAL_COMP      [ shift and go to state 122 ]
  ! DIFERENTE       [ shift and go to state 118 ]
  ! MENOR           [ shift and go to state 119 ]
  ! MENOR_IGUAL     [ shift and go to state 125 ]
  ! MAIOR           [ shift and go to state 116 ]
  ! MAIOR_IGUAL     [ shift and go to state 114 ]
  ! OU_LOGICO       [ shift and go to state 113 ]
  ! E_LOGICO        [ shift and go to state 112 ]
  ! TERN_IF         [ shift and go to state 115 ]


state 110

    (62) exp -> LPAREN exp . RPAREN
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    RPAREN          shift and go to state 142
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115


state 111

    (56) exp -> NEGACAO exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    PLUS            reduce using rule 56 (exp -> NEGACAO exp .)
    MINUS           reduce using rule 56 (exp -> NEGACAO exp .)
    TIMES           reduce using rule 56 (exp -> NEGACAO exp .)
    DIVIDE          reduce using rule 56 (exp -> NEGACAO exp .)
    MOD             reduce using rule 56 (exp -> NEGACAO exp .)
    IGUAL_COMP      reduce using rule 56 (exp -> NEGACAO exp .)
    DIFERENTE       reduce using rule 56 (exp -> NEGACAO exp .)
    MENOR           reduce using rule 56 (exp -> NEGACAO exp .)
    MENOR_IGUAL     reduce using rule 56 (exp -> NEGACAO exp .)
    MAIOR           reduce using rule 56 (exp -> NEGACAO exp .)
    MAIOR_IGUAL     reduce using rule 56 (exp -> NEGACAO exp .)
    OU_LOGICO       reduce using rule 56 (exp -> NEGACAO exp .)
    E_LOGICO        reduce using rule 56 (exp -> NEGACAO exp .)
    TERN_IF         reduce using rule 56 (exp -> NEGACAO exp .)
    PONTOVIRGULA    reduce using rule 56 (exp -> NEGACAO exp .)
    VIRGULA         reduce using rule 56 (exp -> NEGACAO exp .)
    RPAREN          reduce using rule 56 (exp -> NEGACAO exp .)
    RCOL            reduce using rule 56 (exp -> NEGACAO exp .)
    TERN_ELSE       reduce using rule 56 (exp -> NEGACAO exp .)

  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 124 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 126 ]
  ! MOD             [ shift and go to state 123 ]
  ! IGUAL_COMP      [ shift and go to state 122 ]
  ! DIFERENTE       [ shift and go to state 118 ]
  ! MENOR           [ shift and go to state 119 ]
  ! MENOR_IGUAL     [ shift and go to state 125 ]
  ! MAIOR           [ shift and go to state 116 ]
  ! MAIOR_IGUAL     [ shift and go to state 114 ]
  ! OU_LOGICO       [ shift and go to state 113 ]
  ! E_LOGICO        [ shift and go to state 112 ]
  ! TERN_IF         [ shift and go to state 115 ]


state 112

    (55) exp -> exp E_LOGICO . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 143

state 113

    (54) exp -> exp OU_LOGICO . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 144

state 114

    (53) exp -> exp MAIOR_IGUAL . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 145

state 115

    (58) exp -> exp TERN_IF . exp TERN_ELSE exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 146

state 116

    (52) exp -> exp MAIOR . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 147

state 117

    (45) exp -> exp TIMES . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 148

state 118

    (49) exp -> exp DIFERENTE . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 149

state 119

    (50) exp -> exp MENOR . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 150

state 120

    (43) exp -> exp PLUS . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 151

state 121

    (33) returnStmt -> RETURN exp PONTOVIRGULA .

    IF              reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    WHILE           reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    FOR             reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    BREAK           reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    RETURN          reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    READ            reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    WRITE           reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    ID              reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    RCHAVES         reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)


state 122

    (48) exp -> exp IGUAL_COMP . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 152

state 123

    (47) exp -> exp MOD . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 153

state 124

    (44) exp -> exp MINUS . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 154

state 125

    (51) exp -> exp MENOR_IGUAL . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 155

state 126

    (46) exp -> exp DIVIDE . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 156

state 127

    (30) readStmt -> READ var PONTOVIRGULA .

    IF              reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    WHILE           reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    FOR             reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    BREAK           reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    RETURN          reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    READ            reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    WRITE           reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    ID              reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    RCHAVES         reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)


state 128

    (27) whileStmt -> WHILE LPAREN exp . RPAREN LCHAVES block RCHAVES
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    RPAREN          shift and go to state 157
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115


state 129

    (39) assign -> var DIV_ATRIB exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    PONTOVIRGULA    reduce using rule 39 (assign -> var DIV_ATRIB exp .)
    RPAREN          reduce using rule 39 (assign -> var DIV_ATRIB exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115


state 130

    (35) assign -> var IGUAL_ATRIB exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    PONTOVIRGULA    reduce using rule 35 (assign -> var IGUAL_ATRIB exp .)
    RPAREN          reduce using rule 35 (assign -> var IGUAL_ATRIB exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115


state 131

    (40) assign -> var MOD_IGUAL exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    PONTOVIRGULA    reduce using rule 40 (assign -> var MOD_IGUAL exp .)
    RPAREN          reduce using rule 40 (assign -> var MOD_IGUAL exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115


state 132

    (36) assign -> var INCREMENTO exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    PONTOVIRGULA    reduce using rule 36 (assign -> var INCREMENTO exp .)
    RPAREN          reduce using rule 36 (assign -> var INCREMENTO exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115


state 133

    (38) assign -> var MULT_ATRIB exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    PONTOVIRGULA    reduce using rule 38 (assign -> var MULT_ATRIB exp .)
    RPAREN          reduce using rule 38 (assign -> var MULT_ATRIB exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115


state 134

    (37) assign -> var DECREMENTO exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    PONTOVIRGULA    reduce using rule 37 (assign -> var DECREMENTO exp .)
    RPAREN          reduce using rule 37 (assign -> var DECREMENTO exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115


state 135

    (28) forStmt -> FOR LPAREN assign . PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES

    PONTOVIRGULA    shift and go to state 158


state 136

    (31) writeStmt -> WRITE expList PONTOVIRGULA .

    IF              reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    WHILE           reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    FOR             reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    BREAK           reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    RETURN          reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    READ            reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    WRITE           reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    ID              reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    RCHAVES         reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)


state 137

    (83) expSeq -> exp VIRGULA . expSeq
    (83) expSeq -> . exp VIRGULA expSeq
    (84) expSeq -> . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    subCall                        shift and go to state 78
    literal                        shift and go to state 79
    expSeq                         shift and go to state 159
    exp                            shift and go to state 101
    var                            shift and go to state 80

state 138

    (34) subCall -> ID LPAREN expList . RPAREN

    RPAREN          shift and go to state 160


state 139

    (42) var -> ID LCOL exp . RCOL
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    RCOL            shift and go to state 161
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115


state 140

    (25) ifStmt -> IF LPAREN exp . RPAREN LCHAVES block RCHAVES
    (26) ifStmt -> IF LPAREN exp . RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    RPAREN          shift and go to state 162
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115


state 141

    (79) literalSeq -> literal VIRGULA literalSeq .

    RCHAVES         reduce using rule 79 (literalSeq -> literal VIRGULA literalSeq .)


state 142

    (62) exp -> LPAREN exp RPAREN .

    PLUS            reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    MOD             reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    IGUAL_COMP      reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    DIFERENTE       reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    MENOR           reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    MENOR_IGUAL     reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    MAIOR           reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    MAIOR_IGUAL     reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    OU_LOGICO       reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    E_LOGICO        reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    TERN_IF         reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    PONTOVIRGULA    reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    VIRGULA         reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    RCOL            reduce using rule 62 (exp -> LPAREN exp RPAREN .)
    TERN_ELSE       reduce using rule 62 (exp -> LPAREN exp RPAREN .)


state 143

    (55) exp -> exp E_LOGICO exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    MOD             reduce using rule 55 (exp -> exp E_LOGICO exp .)
    OU_LOGICO       reduce using rule 55 (exp -> exp E_LOGICO exp .)
    E_LOGICO        reduce using rule 55 (exp -> exp E_LOGICO exp .)
    TERN_IF         reduce using rule 55 (exp -> exp E_LOGICO exp .)
    PONTOVIRGULA    reduce using rule 55 (exp -> exp E_LOGICO exp .)
    VIRGULA         reduce using rule 55 (exp -> exp E_LOGICO exp .)
    RPAREN          reduce using rule 55 (exp -> exp E_LOGICO exp .)
    RCOL            reduce using rule 55 (exp -> exp E_LOGICO exp .)
    TERN_ELSE       reduce using rule 55 (exp -> exp E_LOGICO exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114

  ! PLUS            [ reduce using rule 55 (exp -> exp E_LOGICO exp .) ]
  ! MINUS           [ reduce using rule 55 (exp -> exp E_LOGICO exp .) ]
  ! TIMES           [ reduce using rule 55 (exp -> exp E_LOGICO exp .) ]
  ! DIVIDE          [ reduce using rule 55 (exp -> exp E_LOGICO exp .) ]
  ! IGUAL_COMP      [ reduce using rule 55 (exp -> exp E_LOGICO exp .) ]
  ! DIFERENTE       [ reduce using rule 55 (exp -> exp E_LOGICO exp .) ]
  ! MENOR           [ reduce using rule 55 (exp -> exp E_LOGICO exp .) ]
  ! MENOR_IGUAL     [ reduce using rule 55 (exp -> exp E_LOGICO exp .) ]
  ! MAIOR           [ reduce using rule 55 (exp -> exp E_LOGICO exp .) ]
  ! MAIOR_IGUAL     [ reduce using rule 55 (exp -> exp E_LOGICO exp .) ]
  ! MOD             [ shift and go to state 123 ]
  ! OU_LOGICO       [ shift and go to state 113 ]
  ! E_LOGICO        [ shift and go to state 112 ]
  ! TERN_IF         [ shift and go to state 115 ]


state 144

    (54) exp -> exp OU_LOGICO exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    MOD             reduce using rule 54 (exp -> exp OU_LOGICO exp .)
    OU_LOGICO       reduce using rule 54 (exp -> exp OU_LOGICO exp .)
    TERN_IF         reduce using rule 54 (exp -> exp OU_LOGICO exp .)
    PONTOVIRGULA    reduce using rule 54 (exp -> exp OU_LOGICO exp .)
    VIRGULA         reduce using rule 54 (exp -> exp OU_LOGICO exp .)
    RPAREN          reduce using rule 54 (exp -> exp OU_LOGICO exp .)
    RCOL            reduce using rule 54 (exp -> exp OU_LOGICO exp .)
    TERN_ELSE       reduce using rule 54 (exp -> exp OU_LOGICO exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    E_LOGICO        shift and go to state 112

  ! PLUS            [ reduce using rule 54 (exp -> exp OU_LOGICO exp .) ]
  ! MINUS           [ reduce using rule 54 (exp -> exp OU_LOGICO exp .) ]
  ! TIMES           [ reduce using rule 54 (exp -> exp OU_LOGICO exp .) ]
  ! DIVIDE          [ reduce using rule 54 (exp -> exp OU_LOGICO exp .) ]
  ! IGUAL_COMP      [ reduce using rule 54 (exp -> exp OU_LOGICO exp .) ]
  ! DIFERENTE       [ reduce using rule 54 (exp -> exp OU_LOGICO exp .) ]
  ! MENOR           [ reduce using rule 54 (exp -> exp OU_LOGICO exp .) ]
  ! MENOR_IGUAL     [ reduce using rule 54 (exp -> exp OU_LOGICO exp .) ]
  ! MAIOR           [ reduce using rule 54 (exp -> exp OU_LOGICO exp .) ]
  ! MAIOR_IGUAL     [ reduce using rule 54 (exp -> exp OU_LOGICO exp .) ]
  ! E_LOGICO        [ reduce using rule 54 (exp -> exp OU_LOGICO exp .) ]
  ! MOD             [ shift and go to state 123 ]
  ! OU_LOGICO       [ shift and go to state 113 ]
  ! TERN_IF         [ shift and go to state 115 ]


state 145

    (53) exp -> exp MAIOR_IGUAL exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    MOD             reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    IGUAL_COMP      reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    DIFERENTE       reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    MENOR           reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    MENOR_IGUAL     reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    MAIOR           reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    MAIOR_IGUAL     reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    OU_LOGICO       reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    E_LOGICO        reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    TERN_IF         reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    PONTOVIRGULA    reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    VIRGULA         reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    RPAREN          reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    RCOL            reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    TERN_ELSE       reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126

  ! PLUS            [ reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .) ]
  ! MINUS           [ reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .) ]
  ! TIMES           [ reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .) ]
  ! DIVIDE          [ reduce using rule 53 (exp -> exp MAIOR_IGUAL exp .) ]
  ! MOD             [ shift and go to state 123 ]
  ! IGUAL_COMP      [ shift and go to state 122 ]
  ! DIFERENTE       [ shift and go to state 118 ]
  ! MENOR           [ shift and go to state 119 ]
  ! MENOR_IGUAL     [ shift and go to state 125 ]
  ! MAIOR           [ shift and go to state 116 ]
  ! MAIOR_IGUAL     [ shift and go to state 114 ]
  ! OU_LOGICO       [ shift and go to state 113 ]
  ! E_LOGICO        [ shift and go to state 112 ]
  ! TERN_IF         [ shift and go to state 115 ]


state 146

    (58) exp -> exp TERN_IF exp . TERN_ELSE exp
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    TERN_ELSE       shift and go to state 163
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115


state 147

    (52) exp -> exp MAIOR exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    MOD             reduce using rule 52 (exp -> exp MAIOR exp .)
    IGUAL_COMP      reduce using rule 52 (exp -> exp MAIOR exp .)
    DIFERENTE       reduce using rule 52 (exp -> exp MAIOR exp .)
    MENOR           reduce using rule 52 (exp -> exp MAIOR exp .)
    MENOR_IGUAL     reduce using rule 52 (exp -> exp MAIOR exp .)
    MAIOR           reduce using rule 52 (exp -> exp MAIOR exp .)
    MAIOR_IGUAL     reduce using rule 52 (exp -> exp MAIOR exp .)
    OU_LOGICO       reduce using rule 52 (exp -> exp MAIOR exp .)
    E_LOGICO        reduce using rule 52 (exp -> exp MAIOR exp .)
    TERN_IF         reduce using rule 52 (exp -> exp MAIOR exp .)
    PONTOVIRGULA    reduce using rule 52 (exp -> exp MAIOR exp .)
    VIRGULA         reduce using rule 52 (exp -> exp MAIOR exp .)
    RPAREN          reduce using rule 52 (exp -> exp MAIOR exp .)
    RCOL            reduce using rule 52 (exp -> exp MAIOR exp .)
    TERN_ELSE       reduce using rule 52 (exp -> exp MAIOR exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126

  ! PLUS            [ reduce using rule 52 (exp -> exp MAIOR exp .) ]
  ! MINUS           [ reduce using rule 52 (exp -> exp MAIOR exp .) ]
  ! TIMES           [ reduce using rule 52 (exp -> exp MAIOR exp .) ]
  ! DIVIDE          [ reduce using rule 52 (exp -> exp MAIOR exp .) ]
  ! MOD             [ shift and go to state 123 ]
  ! IGUAL_COMP      [ shift and go to state 122 ]
  ! DIFERENTE       [ shift and go to state 118 ]
  ! MENOR           [ shift and go to state 119 ]
  ! MENOR_IGUAL     [ shift and go to state 125 ]
  ! MAIOR           [ shift and go to state 116 ]
  ! MAIOR_IGUAL     [ shift and go to state 114 ]
  ! OU_LOGICO       [ shift and go to state 113 ]
  ! E_LOGICO        [ shift and go to state 112 ]
  ! TERN_IF         [ shift and go to state 115 ]


state 148

    (45) exp -> exp TIMES exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    PLUS            reduce using rule 45 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 45 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 45 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 45 (exp -> exp TIMES exp .)
    MOD             reduce using rule 45 (exp -> exp TIMES exp .)
    IGUAL_COMP      reduce using rule 45 (exp -> exp TIMES exp .)
    DIFERENTE       reduce using rule 45 (exp -> exp TIMES exp .)
    MENOR           reduce using rule 45 (exp -> exp TIMES exp .)
    MENOR_IGUAL     reduce using rule 45 (exp -> exp TIMES exp .)
    MAIOR           reduce using rule 45 (exp -> exp TIMES exp .)
    MAIOR_IGUAL     reduce using rule 45 (exp -> exp TIMES exp .)
    OU_LOGICO       reduce using rule 45 (exp -> exp TIMES exp .)
    E_LOGICO        reduce using rule 45 (exp -> exp TIMES exp .)
    TERN_IF         reduce using rule 45 (exp -> exp TIMES exp .)
    PONTOVIRGULA    reduce using rule 45 (exp -> exp TIMES exp .)
    VIRGULA         reduce using rule 45 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 45 (exp -> exp TIMES exp .)
    RCOL            reduce using rule 45 (exp -> exp TIMES exp .)
    TERN_ELSE       reduce using rule 45 (exp -> exp TIMES exp .)

  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 124 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 126 ]
  ! MOD             [ shift and go to state 123 ]
  ! IGUAL_COMP      [ shift and go to state 122 ]
  ! DIFERENTE       [ shift and go to state 118 ]
  ! MENOR           [ shift and go to state 119 ]
  ! MENOR_IGUAL     [ shift and go to state 125 ]
  ! MAIOR           [ shift and go to state 116 ]
  ! MAIOR_IGUAL     [ shift and go to state 114 ]
  ! OU_LOGICO       [ shift and go to state 113 ]
  ! E_LOGICO        [ shift and go to state 112 ]
  ! TERN_IF         [ shift and go to state 115 ]


state 149

    (49) exp -> exp DIFERENTE exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    MOD             reduce using rule 49 (exp -> exp DIFERENTE exp .)
    IGUAL_COMP      reduce using rule 49 (exp -> exp DIFERENTE exp .)
    DIFERENTE       reduce using rule 49 (exp -> exp DIFERENTE exp .)
    OU_LOGICO       reduce using rule 49 (exp -> exp DIFERENTE exp .)
    E_LOGICO        reduce using rule 49 (exp -> exp DIFERENTE exp .)
    TERN_IF         reduce using rule 49 (exp -> exp DIFERENTE exp .)
    PONTOVIRGULA    reduce using rule 49 (exp -> exp DIFERENTE exp .)
    VIRGULA         reduce using rule 49 (exp -> exp DIFERENTE exp .)
    RPAREN          reduce using rule 49 (exp -> exp DIFERENTE exp .)
    RCOL            reduce using rule 49 (exp -> exp DIFERENTE exp .)
    TERN_ELSE       reduce using rule 49 (exp -> exp DIFERENTE exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114

  ! PLUS            [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! MINUS           [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! TIMES           [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! DIVIDE          [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! MENOR           [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! MENOR_IGUAL     [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! MAIOR           [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! MAIOR_IGUAL     [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! MOD             [ shift and go to state 123 ]
  ! IGUAL_COMP      [ shift and go to state 122 ]
  ! DIFERENTE       [ shift and go to state 118 ]
  ! OU_LOGICO       [ shift and go to state 113 ]
  ! E_LOGICO        [ shift and go to state 112 ]
  ! TERN_IF         [ shift and go to state 115 ]


state 150

    (50) exp -> exp MENOR exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    MOD             reduce using rule 50 (exp -> exp MENOR exp .)
    IGUAL_COMP      reduce using rule 50 (exp -> exp MENOR exp .)
    DIFERENTE       reduce using rule 50 (exp -> exp MENOR exp .)
    MENOR           reduce using rule 50 (exp -> exp MENOR exp .)
    MENOR_IGUAL     reduce using rule 50 (exp -> exp MENOR exp .)
    MAIOR           reduce using rule 50 (exp -> exp MENOR exp .)
    MAIOR_IGUAL     reduce using rule 50 (exp -> exp MENOR exp .)
    OU_LOGICO       reduce using rule 50 (exp -> exp MENOR exp .)
    E_LOGICO        reduce using rule 50 (exp -> exp MENOR exp .)
    TERN_IF         reduce using rule 50 (exp -> exp MENOR exp .)
    PONTOVIRGULA    reduce using rule 50 (exp -> exp MENOR exp .)
    VIRGULA         reduce using rule 50 (exp -> exp MENOR exp .)
    RPAREN          reduce using rule 50 (exp -> exp MENOR exp .)
    RCOL            reduce using rule 50 (exp -> exp MENOR exp .)
    TERN_ELSE       reduce using rule 50 (exp -> exp MENOR exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126

  ! PLUS            [ reduce using rule 50 (exp -> exp MENOR exp .) ]
  ! MINUS           [ reduce using rule 50 (exp -> exp MENOR exp .) ]
  ! TIMES           [ reduce using rule 50 (exp -> exp MENOR exp .) ]
  ! DIVIDE          [ reduce using rule 50 (exp -> exp MENOR exp .) ]
  ! MOD             [ shift and go to state 123 ]
  ! IGUAL_COMP      [ shift and go to state 122 ]
  ! DIFERENTE       [ shift and go to state 118 ]
  ! MENOR           [ shift and go to state 119 ]
  ! MENOR_IGUAL     [ shift and go to state 125 ]
  ! MAIOR           [ shift and go to state 116 ]
  ! MAIOR_IGUAL     [ shift and go to state 114 ]
  ! OU_LOGICO       [ shift and go to state 113 ]
  ! E_LOGICO        [ shift and go to state 112 ]
  ! TERN_IF         [ shift and go to state 115 ]


state 151

    (43) exp -> exp PLUS exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    PLUS            reduce using rule 43 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 43 (exp -> exp PLUS exp .)
    MOD             reduce using rule 43 (exp -> exp PLUS exp .)
    IGUAL_COMP      reduce using rule 43 (exp -> exp PLUS exp .)
    DIFERENTE       reduce using rule 43 (exp -> exp PLUS exp .)
    MENOR           reduce using rule 43 (exp -> exp PLUS exp .)
    MENOR_IGUAL     reduce using rule 43 (exp -> exp PLUS exp .)
    MAIOR           reduce using rule 43 (exp -> exp PLUS exp .)
    MAIOR_IGUAL     reduce using rule 43 (exp -> exp PLUS exp .)
    OU_LOGICO       reduce using rule 43 (exp -> exp PLUS exp .)
    E_LOGICO        reduce using rule 43 (exp -> exp PLUS exp .)
    TERN_IF         reduce using rule 43 (exp -> exp PLUS exp .)
    PONTOVIRGULA    reduce using rule 43 (exp -> exp PLUS exp .)
    VIRGULA         reduce using rule 43 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 43 (exp -> exp PLUS exp .)
    RCOL            reduce using rule 43 (exp -> exp PLUS exp .)
    TERN_ELSE       reduce using rule 43 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126

  ! TIMES           [ reduce using rule 43 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 43 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 123 ]
  ! IGUAL_COMP      [ shift and go to state 122 ]
  ! DIFERENTE       [ shift and go to state 118 ]
  ! MENOR           [ shift and go to state 119 ]
  ! MENOR_IGUAL     [ shift and go to state 125 ]
  ! MAIOR           [ shift and go to state 116 ]
  ! MAIOR_IGUAL     [ shift and go to state 114 ]
  ! OU_LOGICO       [ shift and go to state 113 ]
  ! E_LOGICO        [ shift and go to state 112 ]
  ! TERN_IF         [ shift and go to state 115 ]


state 152

    (48) exp -> exp IGUAL_COMP exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    MOD             reduce using rule 48 (exp -> exp IGUAL_COMP exp .)
    IGUAL_COMP      reduce using rule 48 (exp -> exp IGUAL_COMP exp .)
    DIFERENTE       reduce using rule 48 (exp -> exp IGUAL_COMP exp .)
    OU_LOGICO       reduce using rule 48 (exp -> exp IGUAL_COMP exp .)
    E_LOGICO        reduce using rule 48 (exp -> exp IGUAL_COMP exp .)
    TERN_IF         reduce using rule 48 (exp -> exp IGUAL_COMP exp .)
    PONTOVIRGULA    reduce using rule 48 (exp -> exp IGUAL_COMP exp .)
    VIRGULA         reduce using rule 48 (exp -> exp IGUAL_COMP exp .)
    RPAREN          reduce using rule 48 (exp -> exp IGUAL_COMP exp .)
    RCOL            reduce using rule 48 (exp -> exp IGUAL_COMP exp .)
    TERN_ELSE       reduce using rule 48 (exp -> exp IGUAL_COMP exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114

  ! PLUS            [ reduce using rule 48 (exp -> exp IGUAL_COMP exp .) ]
  ! MINUS           [ reduce using rule 48 (exp -> exp IGUAL_COMP exp .) ]
  ! TIMES           [ reduce using rule 48 (exp -> exp IGUAL_COMP exp .) ]
  ! DIVIDE          [ reduce using rule 48 (exp -> exp IGUAL_COMP exp .) ]
  ! MENOR           [ reduce using rule 48 (exp -> exp IGUAL_COMP exp .) ]
  ! MENOR_IGUAL     [ reduce using rule 48 (exp -> exp IGUAL_COMP exp .) ]
  ! MAIOR           [ reduce using rule 48 (exp -> exp IGUAL_COMP exp .) ]
  ! MAIOR_IGUAL     [ reduce using rule 48 (exp -> exp IGUAL_COMP exp .) ]
  ! MOD             [ shift and go to state 123 ]
  ! IGUAL_COMP      [ shift and go to state 122 ]
  ! DIFERENTE       [ shift and go to state 118 ]
  ! OU_LOGICO       [ shift and go to state 113 ]
  ! E_LOGICO        [ shift and go to state 112 ]
  ! TERN_IF         [ shift and go to state 115 ]


state 153

    (47) exp -> exp MOD exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for IGUAL_COMP resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MAIOR_IGUAL resolved as shift
  ! shift/reduce conflict for OU_LOGICO resolved as shift
  ! shift/reduce conflict for E_LOGICO resolved as shift
  ! shift/reduce conflict for TERN_IF resolved as shift
    PONTOVIRGULA    reduce using rule 47 (exp -> exp MOD exp .)
    VIRGULA         reduce using rule 47 (exp -> exp MOD exp .)
    RPAREN          reduce using rule 47 (exp -> exp MOD exp .)
    RCOL            reduce using rule 47 (exp -> exp MOD exp .)
    TERN_ELSE       reduce using rule 47 (exp -> exp MOD exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115

  ! PLUS            [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! MINUS           [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! TIMES           [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! DIVIDE          [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! MOD             [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! IGUAL_COMP      [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! DIFERENTE       [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! MENOR           [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! MENOR_IGUAL     [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! MAIOR           [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! MAIOR_IGUAL     [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! OU_LOGICO       [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! E_LOGICO        [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! TERN_IF         [ reduce using rule 47 (exp -> exp MOD exp .) ]


state 154

    (44) exp -> exp MINUS exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    PLUS            reduce using rule 44 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 44 (exp -> exp MINUS exp .)
    MOD             reduce using rule 44 (exp -> exp MINUS exp .)
    IGUAL_COMP      reduce using rule 44 (exp -> exp MINUS exp .)
    DIFERENTE       reduce using rule 44 (exp -> exp MINUS exp .)
    MENOR           reduce using rule 44 (exp -> exp MINUS exp .)
    MENOR_IGUAL     reduce using rule 44 (exp -> exp MINUS exp .)
    MAIOR           reduce using rule 44 (exp -> exp MINUS exp .)
    MAIOR_IGUAL     reduce using rule 44 (exp -> exp MINUS exp .)
    OU_LOGICO       reduce using rule 44 (exp -> exp MINUS exp .)
    E_LOGICO        reduce using rule 44 (exp -> exp MINUS exp .)
    TERN_IF         reduce using rule 44 (exp -> exp MINUS exp .)
    PONTOVIRGULA    reduce using rule 44 (exp -> exp MINUS exp .)
    VIRGULA         reduce using rule 44 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 44 (exp -> exp MINUS exp .)
    RCOL            reduce using rule 44 (exp -> exp MINUS exp .)
    TERN_ELSE       reduce using rule 44 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126

  ! TIMES           [ reduce using rule 44 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 44 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 123 ]
  ! IGUAL_COMP      [ shift and go to state 122 ]
  ! DIFERENTE       [ shift and go to state 118 ]
  ! MENOR           [ shift and go to state 119 ]
  ! MENOR_IGUAL     [ shift and go to state 125 ]
  ! MAIOR           [ shift and go to state 116 ]
  ! MAIOR_IGUAL     [ shift and go to state 114 ]
  ! OU_LOGICO       [ shift and go to state 113 ]
  ! E_LOGICO        [ shift and go to state 112 ]
  ! TERN_IF         [ shift and go to state 115 ]


state 155

    (51) exp -> exp MENOR_IGUAL exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    MOD             reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    IGUAL_COMP      reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    DIFERENTE       reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    MENOR           reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    MENOR_IGUAL     reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    MAIOR           reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    MAIOR_IGUAL     reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    OU_LOGICO       reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    E_LOGICO        reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    TERN_IF         reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    PONTOVIRGULA    reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    VIRGULA         reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    RPAREN          reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    RCOL            reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    TERN_ELSE       reduce using rule 51 (exp -> exp MENOR_IGUAL exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126

  ! PLUS            [ reduce using rule 51 (exp -> exp MENOR_IGUAL exp .) ]
  ! MINUS           [ reduce using rule 51 (exp -> exp MENOR_IGUAL exp .) ]
  ! TIMES           [ reduce using rule 51 (exp -> exp MENOR_IGUAL exp .) ]
  ! DIVIDE          [ reduce using rule 51 (exp -> exp MENOR_IGUAL exp .) ]
  ! MOD             [ shift and go to state 123 ]
  ! IGUAL_COMP      [ shift and go to state 122 ]
  ! DIFERENTE       [ shift and go to state 118 ]
  ! MENOR           [ shift and go to state 119 ]
  ! MENOR_IGUAL     [ shift and go to state 125 ]
  ! MAIOR           [ shift and go to state 116 ]
  ! MAIOR_IGUAL     [ shift and go to state 114 ]
  ! OU_LOGICO       [ shift and go to state 113 ]
  ! E_LOGICO        [ shift and go to state 112 ]
  ! TERN_IF         [ shift and go to state 115 ]


state 156

    (46) exp -> exp DIVIDE exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    PLUS            reduce using rule 46 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 46 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 46 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 46 (exp -> exp DIVIDE exp .)
    MOD             reduce using rule 46 (exp -> exp DIVIDE exp .)
    IGUAL_COMP      reduce using rule 46 (exp -> exp DIVIDE exp .)
    DIFERENTE       reduce using rule 46 (exp -> exp DIVIDE exp .)
    MENOR           reduce using rule 46 (exp -> exp DIVIDE exp .)
    MENOR_IGUAL     reduce using rule 46 (exp -> exp DIVIDE exp .)
    MAIOR           reduce using rule 46 (exp -> exp DIVIDE exp .)
    MAIOR_IGUAL     reduce using rule 46 (exp -> exp DIVIDE exp .)
    OU_LOGICO       reduce using rule 46 (exp -> exp DIVIDE exp .)
    E_LOGICO        reduce using rule 46 (exp -> exp DIVIDE exp .)
    TERN_IF         reduce using rule 46 (exp -> exp DIVIDE exp .)
    PONTOVIRGULA    reduce using rule 46 (exp -> exp DIVIDE exp .)
    VIRGULA         reduce using rule 46 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 46 (exp -> exp DIVIDE exp .)
    RCOL            reduce using rule 46 (exp -> exp DIVIDE exp .)
    TERN_ELSE       reduce using rule 46 (exp -> exp DIVIDE exp .)

  ! PLUS            [ shift and go to state 120 ]
  ! MINUS           [ shift and go to state 124 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 126 ]
  ! MOD             [ shift and go to state 123 ]
  ! IGUAL_COMP      [ shift and go to state 122 ]
  ! DIFERENTE       [ shift and go to state 118 ]
  ! MENOR           [ shift and go to state 119 ]
  ! MENOR_IGUAL     [ shift and go to state 125 ]
  ! MAIOR           [ shift and go to state 116 ]
  ! MAIOR_IGUAL     [ shift and go to state 114 ]
  ! OU_LOGICO       [ shift and go to state 113 ]
  ! E_LOGICO        [ shift and go to state 112 ]
  ! TERN_IF         [ shift and go to state 115 ]


state 157

    (27) whileStmt -> WHILE LPAREN exp RPAREN . LCHAVES block RCHAVES

    LCHAVES         shift and go to state 164


state 158

    (28) forStmt -> FOR LPAREN assign PONTOVIRGULA . exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    subCall                        shift and go to state 78
    literal                        shift and go to state 79
    exp                            shift and go to state 165
    var                            shift and go to state 80

state 159

    (83) expSeq -> exp VIRGULA expSeq .

    RPAREN          reduce using rule 83 (expSeq -> exp VIRGULA expSeq .)
    PONTOVIRGULA    reduce using rule 83 (expSeq -> exp VIRGULA expSeq .)


state 160

    (34) subCall -> ID LPAREN expList RPAREN .

    PLUS            reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    MINUS           reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    TIMES           reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    DIVIDE          reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    MOD             reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    IGUAL_COMP      reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    DIFERENTE       reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    MENOR           reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    MENOR_IGUAL     reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    MAIOR           reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    MAIOR_IGUAL     reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    OU_LOGICO       reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    E_LOGICO        reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    TERN_IF         reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    PONTOVIRGULA    reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    VIRGULA         reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    RPAREN          reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    RCOL            reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)
    TERN_ELSE       reduce using rule 34 (subCall -> ID LPAREN expList RPAREN .)


state 161

    (42) var -> ID LCOL exp RCOL .

    IGUAL_ATRIB     reduce using rule 42 (var -> ID LCOL exp RCOL .)
    INCREMENTO      reduce using rule 42 (var -> ID LCOL exp RCOL .)
    DECREMENTO      reduce using rule 42 (var -> ID LCOL exp RCOL .)
    MULT_ATRIB      reduce using rule 42 (var -> ID LCOL exp RCOL .)
    DIV_ATRIB       reduce using rule 42 (var -> ID LCOL exp RCOL .)
    MOD_IGUAL       reduce using rule 42 (var -> ID LCOL exp RCOL .)
    PONTOVIRGULA    reduce using rule 42 (var -> ID LCOL exp RCOL .)
    PLUS            reduce using rule 42 (var -> ID LCOL exp RCOL .)
    MINUS           reduce using rule 42 (var -> ID LCOL exp RCOL .)
    TIMES           reduce using rule 42 (var -> ID LCOL exp RCOL .)
    DIVIDE          reduce using rule 42 (var -> ID LCOL exp RCOL .)
    MOD             reduce using rule 42 (var -> ID LCOL exp RCOL .)
    IGUAL_COMP      reduce using rule 42 (var -> ID LCOL exp RCOL .)
    DIFERENTE       reduce using rule 42 (var -> ID LCOL exp RCOL .)
    MENOR           reduce using rule 42 (var -> ID LCOL exp RCOL .)
    MENOR_IGUAL     reduce using rule 42 (var -> ID LCOL exp RCOL .)
    MAIOR           reduce using rule 42 (var -> ID LCOL exp RCOL .)
    MAIOR_IGUAL     reduce using rule 42 (var -> ID LCOL exp RCOL .)
    OU_LOGICO       reduce using rule 42 (var -> ID LCOL exp RCOL .)
    E_LOGICO        reduce using rule 42 (var -> ID LCOL exp RCOL .)
    TERN_IF         reduce using rule 42 (var -> ID LCOL exp RCOL .)
    VIRGULA         reduce using rule 42 (var -> ID LCOL exp RCOL .)
    RPAREN          reduce using rule 42 (var -> ID LCOL exp RCOL .)
    RCOL            reduce using rule 42 (var -> ID LCOL exp RCOL .)
    TERN_ELSE       reduce using rule 42 (var -> ID LCOL exp RCOL .)


state 162

    (25) ifStmt -> IF LPAREN exp RPAREN . LCHAVES block RCHAVES
    (26) ifStmt -> IF LPAREN exp RPAREN . LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES

    LCHAVES         shift and go to state 166


state 163

    (58) exp -> exp TERN_IF exp TERN_ELSE . exp
    (43) exp -> . exp PLUS exp
    (44) exp -> . exp MINUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL_COMP exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENOR exp
    (51) exp -> . exp MENOR_IGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MAIOR_IGUAL exp
    (54) exp -> . exp OU_LOGICO exp
    (55) exp -> . exp E_LOGICO exp
    (56) exp -> . NEGACAO exp
    (57) exp -> . INVERTESINAL exp
    (58) exp -> . exp TERN_IF exp TERN_ELSE exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . LPAREN exp RPAREN
    (34) subCall -> . ID LPAREN expList RPAREN
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL
    (63) literal -> . NUMBER
    (64) literal -> . CADEIA_CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEGACAO         shift and go to state 84
    INVERTESINAL    shift and go to state 81
    LPAREN          shift and go to state 83
    ID              shift and go to state 66
    NUMBER          shift and go to state 29
    CADEIA_CHAR     shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 28

    var                            shift and go to state 80
    literal                        shift and go to state 79
    subCall                        shift and go to state 78
    exp                            shift and go to state 167

state 164

    (27) whileStmt -> WHILE LPAREN exp RPAREN LCHAVES . block RCHAVES
    (15) block -> . varDecList stmtList
    (71) varDecList -> . varDec varDecList
    (72) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (85) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    FOR             reduce using rule 85 (empty -> .)
    BREAK           reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    WRITE           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    RCHAVES         reduce using rule 85 (empty -> .)
    INT             shift and go to state 2
    STRING          shift and go to state 6
    BOOL            shift and go to state 5

    varDec                         shift and go to state 44
    block                          shift and go to state 168
    type                           shift and go to state 47
    empty                          shift and go to state 45
    varDecList                     shift and go to state 46

state 165

    (28) forStmt -> FOR LPAREN assign PONTOVIRGULA exp . PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

    PONTOVIRGULA    shift and go to state 169
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115


state 166

    (25) ifStmt -> IF LPAREN exp RPAREN LCHAVES . block RCHAVES
    (26) ifStmt -> IF LPAREN exp RPAREN LCHAVES . block RCHAVES ELSE LCHAVES block RCHAVES
    (15) block -> . varDecList stmtList
    (71) varDecList -> . varDec varDecList
    (72) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (85) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    FOR             reduce using rule 85 (empty -> .)
    BREAK           reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    WRITE           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    RCHAVES         reduce using rule 85 (empty -> .)
    INT             shift and go to state 2
    STRING          shift and go to state 6
    BOOL            shift and go to state 5

    varDec                         shift and go to state 44
    block                          shift and go to state 170
    type                           shift and go to state 47
    empty                          shift and go to state 45
    varDecList                     shift and go to state 46

state 167

    (58) exp -> exp TERN_IF exp TERN_ELSE exp .
    (43) exp -> exp . PLUS exp
    (44) exp -> exp . MINUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL_COMP exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENOR exp
    (51) exp -> exp . MENOR_IGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MAIOR_IGUAL exp
    (54) exp -> exp . OU_LOGICO exp
    (55) exp -> exp . E_LOGICO exp
    (58) exp -> exp . TERN_IF exp TERN_ELSE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for IGUAL_COMP resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MAIOR_IGUAL resolved as shift
  ! shift/reduce conflict for OU_LOGICO resolved as shift
  ! shift/reduce conflict for E_LOGICO resolved as shift
  ! shift/reduce conflict for TERN_IF resolved as shift
    PONTOVIRGULA    reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .)
    VIRGULA         reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .)
    RPAREN          reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .)
    RCOL            reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .)
    TERN_ELSE       reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 124
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 126
    MOD             shift and go to state 123
    IGUAL_COMP      shift and go to state 122
    DIFERENTE       shift and go to state 118
    MENOR           shift and go to state 119
    MENOR_IGUAL     shift and go to state 125
    MAIOR           shift and go to state 116
    MAIOR_IGUAL     shift and go to state 114
    OU_LOGICO       shift and go to state 113
    E_LOGICO        shift and go to state 112
    TERN_IF         shift and go to state 115

  ! PLUS            [ reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .) ]
  ! MINUS           [ reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .) ]
  ! TIMES           [ reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .) ]
  ! DIVIDE          [ reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .) ]
  ! MOD             [ reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .) ]
  ! IGUAL_COMP      [ reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .) ]
  ! DIFERENTE       [ reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .) ]
  ! MENOR           [ reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .) ]
  ! MENOR_IGUAL     [ reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .) ]
  ! MAIOR           [ reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .) ]
  ! MAIOR_IGUAL     [ reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .) ]
  ! OU_LOGICO       [ reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .) ]
  ! E_LOGICO        [ reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .) ]
  ! TERN_IF         [ reduce using rule 58 (exp -> exp TERN_IF exp TERN_ELSE exp .) ]


state 168

    (27) whileStmt -> WHILE LPAREN exp RPAREN LCHAVES block . RCHAVES

    RCHAVES         shift and go to state 171


state 169

    (28) forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA . assign RPAREN LCHAVES block RCHAVES
    (35) assign -> . var IGUAL_ATRIB exp
    (36) assign -> . var INCREMENTO exp
    (37) assign -> . var DECREMENTO exp
    (38) assign -> . var MULT_ATRIB exp
    (39) assign -> . var DIV_ATRIB exp
    (40) assign -> . var MOD_IGUAL exp
    (41) var -> . ID
    (42) var -> . ID LCOL exp RCOL

    ID              shift and go to state 88

    var                            shift and go to state 59
    assign                         shift and go to state 172

state 170

    (25) ifStmt -> IF LPAREN exp RPAREN LCHAVES block . RCHAVES
    (26) ifStmt -> IF LPAREN exp RPAREN LCHAVES block . RCHAVES ELSE LCHAVES block RCHAVES

    RCHAVES         shift and go to state 173


state 171

    (27) whileStmt -> WHILE LPAREN exp RPAREN LCHAVES block RCHAVES .

    IF              reduce using rule 27 (whileStmt -> WHILE LPAREN exp RPAREN LCHAVES block RCHAVES .)
    WHILE           reduce using rule 27 (whileStmt -> WHILE LPAREN exp RPAREN LCHAVES block RCHAVES .)
    FOR             reduce using rule 27 (whileStmt -> WHILE LPAREN exp RPAREN LCHAVES block RCHAVES .)
    BREAK           reduce using rule 27 (whileStmt -> WHILE LPAREN exp RPAREN LCHAVES block RCHAVES .)
    RETURN          reduce using rule 27 (whileStmt -> WHILE LPAREN exp RPAREN LCHAVES block RCHAVES .)
    READ            reduce using rule 27 (whileStmt -> WHILE LPAREN exp RPAREN LCHAVES block RCHAVES .)
    WRITE           reduce using rule 27 (whileStmt -> WHILE LPAREN exp RPAREN LCHAVES block RCHAVES .)
    ID              reduce using rule 27 (whileStmt -> WHILE LPAREN exp RPAREN LCHAVES block RCHAVES .)
    RCHAVES         reduce using rule 27 (whileStmt -> WHILE LPAREN exp RPAREN LCHAVES block RCHAVES .)


state 172

    (28) forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign . RPAREN LCHAVES block RCHAVES

    RPAREN          shift and go to state 174


state 173

    (25) ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES .
    (26) ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES . ELSE LCHAVES block RCHAVES

    IF              reduce using rule 25 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES .)
    WHILE           reduce using rule 25 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES .)
    FOR             reduce using rule 25 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES .)
    BREAK           reduce using rule 25 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES .)
    RETURN          reduce using rule 25 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES .)
    READ            reduce using rule 25 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES .)
    WRITE           reduce using rule 25 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES .)
    ID              reduce using rule 25 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES .)
    RCHAVES         reduce using rule 25 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES .)
    ELSE            shift and go to state 175


state 174

    (28) forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN . LCHAVES block RCHAVES

    LCHAVES         shift and go to state 176


state 175

    (26) ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE . LCHAVES block RCHAVES

    LCHAVES         shift and go to state 177


state 176

    (28) forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES . block RCHAVES
    (15) block -> . varDecList stmtList
    (71) varDecList -> . varDec varDecList
    (72) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (85) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    FOR             reduce using rule 85 (empty -> .)
    BREAK           reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    WRITE           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    RCHAVES         reduce using rule 85 (empty -> .)
    INT             shift and go to state 2
    STRING          shift and go to state 6
    BOOL            shift and go to state 5

    varDec                         shift and go to state 44
    empty                          shift and go to state 45
    type                           shift and go to state 47
    block                          shift and go to state 178
    varDecList                     shift and go to state 46

state 177

    (26) ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES . block RCHAVES
    (15) block -> . varDecList stmtList
    (71) varDecList -> . varDec varDecList
    (72) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (85) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    FOR             reduce using rule 85 (empty -> .)
    BREAK           reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    WRITE           reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    RCHAVES         reduce using rule 85 (empty -> .)
    INT             shift and go to state 2
    STRING          shift and go to state 6
    BOOL            shift and go to state 5

    varDec                         shift and go to state 44
    block                          shift and go to state 179
    type                           shift and go to state 47
    empty                          shift and go to state 45
    varDecList                     shift and go to state 46

state 178

    (28) forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block . RCHAVES

    RCHAVES         shift and go to state 180


state 179

    (26) ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block . RCHAVES

    RCHAVES         shift and go to state 181


state 180

    (28) forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES .

    IF              reduce using rule 28 (forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES .)
    WHILE           reduce using rule 28 (forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES .)
    FOR             reduce using rule 28 (forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES .)
    BREAK           reduce using rule 28 (forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES .)
    RETURN          reduce using rule 28 (forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES .)
    READ            reduce using rule 28 (forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES .)
    WRITE           reduce using rule 28 (forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES .)
    ID              reduce using rule 28 (forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES .)
    RCHAVES         reduce using rule 28 (forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES .)


state 181

    (26) ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES .

    IF              reduce using rule 26 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES .)
    WHILE           reduce using rule 26 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES .)
    FOR             reduce using rule 26 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES .)
    BREAK           reduce using rule 26 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES .)
    RETURN          reduce using rule 26 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES .)
    READ            reduce using rule 26 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES .)
    WRITE           reduce using rule 26 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES .)
    ID              reduce using rule 26 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES .)
    RCHAVES         reduce using rule 26 (ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 153 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 153 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 153 resolved as shift
WARNING: shift/reduce conflict for MOD in state 153 resolved as shift
WARNING: shift/reduce conflict for IGUAL_COMP in state 153 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 153 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 153 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 153 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 153 resolved as shift
WARNING: shift/reduce conflict for MAIOR_IGUAL in state 153 resolved as shift
WARNING: shift/reduce conflict for OU_LOGICO in state 153 resolved as shift
WARNING: shift/reduce conflict for E_LOGICO in state 153 resolved as shift
WARNING: shift/reduce conflict for TERN_IF in state 153 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 167 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 167 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 167 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 167 resolved as shift
WARNING: shift/reduce conflict for MOD in state 167 resolved as shift
WARNING: shift/reduce conflict for IGUAL_COMP in state 167 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 167 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 167 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 167 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 167 resolved as shift
WARNING: shift/reduce conflict for MAIOR_IGUAL in state 167 resolved as shift
WARNING: shift/reduce conflict for OU_LOGICO in state 167 resolved as shift
WARNING: shift/reduce conflict for E_LOGICO in state 167 resolved as shift
WARNING: shift/reduce conflict for TERN_IF in state 167 resolved as shift

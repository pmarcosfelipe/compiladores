
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightTERN_IFleftOU_LOGICOleftE_LOGICOleftIGUAL_COMPDIFERENTEleftMAIORMAIOR_IGUALMENORMENOR_IGUALleftPLUSMINUSleftTIMESDIVIDEleftNEGACAOID LPAREN RPAREN LCOL RCOL LCHAVES RCHAVES VIRGULA PONTOVIRGULA NUMBER PLUS MINUS TIMES DIVIDE MOD IGUAL_COMP DIFERENTE MAIOR MAIOR_IGUAL MENOR MENOR_IGUAL OU_LOGICO E_LOGICO NEGACAO IGUAL_ATRIB INCREMENTO DECREMENTO MULT_ATRIB DIV_ATRIB MOD_IGUAL TERN_IF TERN_ELSE CADEIA_CHAR FALSE STRING INT ELSE BREAK RETURN TRUE IF FOR WRITE READ WHILE BOOLprogram : decSeqdec : varDec\n\t\t   | ID LPAREN paramList RPAREN LCHAVES block RCHAVES\n\t\t   | type ID LPAREN paramList RPAREN LCHAVES block RCHAVES\n\tvarDec : type varSpecSeq PONTOVIRGULAvarSpec : ID\n\t\t\t   | ID IGUAL_ATRIB literal\n\t\t\t   | ID LCOL NUMBER RCOL\n\t\t\t   | ID LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES\n\ttype : INT\n\t\t\t| STRING\n\t\t\t| BOOL\n\tparam : type ID\n\t\t\t | type ID LCOL RCOL\n\tblock : varDecList stmtList stmt : ifStmt\n\t\t\t | whileStmt\n\t\t\t | forStmt\n\t\t\t | breakStmt\n\t\t\t | returnStmt\n\t\t\t | readStmt\n\t\t\t | writeStmt\n\t\t\t | assign PONTOVIRGULA\n\t\t\t | subCall PONTOVIRGULA\n\t ifStmt : IF LPAREN exp RPAREN LCHAVES block RCHAVES\n\t\t\t   | IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES\n\t whileStmt : WHILE LPAREN exp RPAREN LCHAVES block RCHAVES forStmt : FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVESbreakStmt : BREAK PONTOVIRGULAreadStmt : READ var PONTOVIRGULAwriteStmt : WRITE expList PONTOVIRGULAreturnStmt : RETURN PONTOVIRGULA\n\t\t\t\t  | RETURN exp PONTOVIRGULA\n\tsubCall : ID LPAREN expList RPARENassign : var IGUAL_ATRIB exp\n\t\t\t  | var INCREMENTO exp\n\t\t\t  | var DECREMENTO exp\n\t\t\t  | var MULT_ATRIB exp\n\t\t\t  | var DIV_ATRIB exp\n\t\t\t  | var MOD_IGUAL exp\n\tvar : ID\n   \t\t   | ID LCOL exp RCOL\n\texp : opBinaria\n\t\t   | NEGACAO exp\n\t\t   | exp TERN_IF exp TERN_ELSE exp\n\t\t   | subCall\n\t\t   | var\n\t\t   | literal\n\t\t   | LPAREN exp RPAREN\n\topBinaria : exp PLUS exp\n\t\t\t   \t | exp MINUS exp\n\t\t\t   \t | exp TIMES exp\n\t\t\t   \t | exp DIVIDE exp\n\t\t\t   \t | exp MOD exp\n\t\t\t   \t | exp IGUAL_COMP exp\n\t\t\t   \t | exp DIFERENTE exp\n\t\t\t   \t | exp MENOR exp\n\t\t\t   \t | exp MENOR_IGUAL exp\n\t\t\t   \t | exp MAIOR exp\n\t\t\t   \t | exp MAIOR_IGUAL exp\n\t\t\t   \t | exp OU_LOGICO exp\n\t\t\t   \t | exp E_LOGICO exp\n     literal : NUMBER\n\t\t\t\t| CADEIA_CHAR\n\t\t\t\t| TRUE\n\t            | FALSE\n\tparamList : paramSeq\n\t\t\t\t | empty\n\tparamSeq : param VIRGULA paramSeq\n\t\t\t\t| param\n\tvarDecList : varDec varDecList\n\t\t\t\t  | empty\n\tvarSpecSeq : varSpec VIRGULA varSpecSeq\n\t\t\t\t  | varSpec\n\tdecSeq : dec decSeq\n\t\t\t  | dec\n\tstmtList : stmt stmtList\n\t\t\t\t| empty\n\tliteralSeq : literal VIRGULA literalSeq\n\t\t\t\t  | literal\n\texpList : expSeq\n\t\t\t   | empty\n\texpSeq : exp VIRGULA expSeq\n\t\t\t  | exp\n\tempty :'
    
_lr_action_items = {'RETURN':([16,39,43,44,45,46,52,57,58,62,63,65,68,69,71,82,86,105,106,120,126,135,163,165,170,172,175,176,179,180,],[-5,-85,-85,-85,-72,53,-71,-21,-17,-19,53,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-85,-85,-27,-25,-85,-85,-28,-26,]),'LPAREN':([9,13,53,56,61,64,66,67,78,83,89,90,91,92,93,94,95,102,103,104,111,112,113,114,115,116,117,118,119,121,122,123,124,125,136,157,162,],[14,19,78,89,96,78,102,104,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'READ':([16,39,43,44,45,46,52,57,58,62,63,65,68,69,71,82,86,105,106,120,126,135,163,165,170,172,175,176,179,180,],[-5,-85,-85,-85,-72,55,-71,-21,-17,-19,55,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-85,-85,-27,-25,-85,-85,-28,-26,]),'NUMBER':([17,18,50,53,64,78,83,89,90,91,92,93,94,95,102,103,104,108,111,112,113,114,115,116,117,118,119,121,122,123,124,125,136,157,162,],[27,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'MOD_IGUAL':([59,66,88,160,],[92,-41,-41,-42,]),'DIFERENTE':([28,29,31,32,66,79,80,81,84,85,101,109,110,127,128,129,130,131,132,133,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,],[-66,-63,-64,-65,-41,-46,-48,-47,118,-43,118,118,-44,118,118,118,118,118,118,118,118,118,-49,-59,118,118,-60,118,-57,-52,-56,-50,-55,118,-51,-58,-53,-34,-42,118,118,]),'WHILE':([16,39,43,44,45,46,52,57,58,62,63,65,68,69,71,82,86,105,106,120,126,135,163,165,170,172,175,176,179,180,],[-5,-85,-85,-85,-72,56,-71,-21,-17,-19,56,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-85,-85,-27,-25,-85,-85,-28,-26,]),'CADEIA_CHAR':([18,50,53,64,78,83,89,90,91,92,93,94,95,102,103,104,108,111,112,113,114,115,116,117,118,119,121,122,123,124,125,136,157,162,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'TRUE':([18,50,53,64,78,83,89,90,91,92,93,94,95,102,103,104,108,111,112,113,114,115,116,117,118,119,121,122,123,124,125,136,157,162,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'MINUS':([28,29,31,32,66,79,80,81,84,85,101,109,110,127,128,129,130,131,132,133,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,],[-66,-63,-64,-65,-41,-46,-48,-47,123,-43,123,123,-44,123,123,123,123,123,123,123,123,123,-49,123,123,123,123,123,123,-52,123,-50,123,123,-51,123,-53,-34,-42,123,123,]),'DIVIDE':([28,29,31,32,66,79,80,81,84,85,101,109,110,127,128,129,130,131,132,133,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,],[-66,-63,-64,-65,-41,-46,-48,-47,125,-43,125,125,-44,125,125,125,125,125,125,125,125,125,-49,125,125,125,125,125,125,-52,125,125,125,125,125,125,-53,-34,-42,125,125,]),'DIV_ATRIB':([59,66,88,160,],[90,-41,-41,-42,]),'RPAREN':([14,19,20,21,22,23,28,29,31,32,33,36,40,49,66,79,80,81,85,98,99,101,102,109,110,127,128,129,130,131,132,133,137,139,141,142,143,144,145,147,148,149,150,151,152,153,154,155,158,159,160,166,171,],[-85,-85,-67,34,-70,-68,-66,-63,-64,-65,38,-13,-69,-14,-41,-46,-48,-47,-43,-81,-82,-84,-85,141,-44,156,-39,-35,-40,-36,-38,-37,159,161,-49,-59,-62,-61,-60,-57,-52,-56,-50,-55,-54,-51,-58,-53,-83,-34,-42,-45,173,]),'VIRGULA':([11,13,22,26,28,29,30,31,32,36,37,49,66,76,79,80,81,85,101,107,110,141,142,143,144,145,147,148,149,150,151,152,153,154,155,159,160,166,],[15,-6,35,-6,-66,-63,-7,-64,-65,-13,-8,-14,-41,108,-46,-48,-47,-43,136,-9,-44,-49,-59,-62,-61,-60,-57,-52,-56,-50,-55,-54,-51,-58,-53,-34,-42,-45,]),'LCOL':([13,26,36,66,88,],[17,17,41,103,103,]),'MAIOR_IGUAL':([28,29,31,32,66,79,80,81,84,85,101,109,110,127,128,129,130,131,132,133,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,],[-66,-63,-64,-65,-41,-46,-48,-47,114,-43,114,114,-44,114,114,114,114,114,114,114,114,114,-49,-59,114,114,-60,114,-57,-52,114,-50,114,114,-51,-58,-53,-34,-42,114,114,]),'MAIOR':([28,29,31,32,66,79,80,81,84,85,101,109,110,127,128,129,130,131,132,133,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,],[-66,-63,-64,-65,-41,-46,-48,-47,111,-43,111,111,-44,111,111,111,111,111,111,111,111,111,-49,-59,111,111,-60,111,-57,-52,111,-50,111,111,-51,-58,-53,-34,-42,111,111,]),'PLUS':([28,29,31,32,66,79,80,81,84,85,101,109,110,127,128,129,130,131,132,133,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,],[-66,-63,-64,-65,-41,-46,-48,-47,119,-43,119,119,-44,119,119,119,119,119,119,119,119,119,-49,119,119,119,119,119,119,-52,119,-50,119,119,-51,119,-53,-34,-42,119,119,]),'RCHAVES':([16,28,29,31,32,39,43,44,45,46,48,51,52,57,58,60,62,63,65,68,69,71,72,75,76,82,86,97,105,106,120,126,135,140,163,165,167,169,170,172,175,176,177,178,179,180,],[-5,-66,-63,-64,-65,-85,-85,-85,-72,-85,74,77,-71,-21,-17,-78,-19,-85,-20,-22,-16,-18,-15,107,-80,-32,-24,-77,-29,-23,-33,-30,-31,-79,-85,-85,170,172,-27,-25,-85,-85,179,180,-28,-26,]),'LCHAVES':([34,38,42,156,161,173,174,],[39,43,50,163,165,175,176,]),'INCREMENTO':([59,66,88,160,],[93,-41,-41,-42,]),'IGUAL_COMP':([28,29,31,32,66,79,80,81,84,85,101,109,110,127,128,129,130,131,132,133,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,],[-66,-63,-64,-65,-41,-46,-48,-47,121,-43,121,121,-44,121,121,121,121,121,121,121,121,121,-49,-59,121,121,-60,121,-57,-52,-56,-50,-55,121,-51,-58,-53,-34,-42,121,121,]),'MENOR_IGUAL':([28,29,31,32,66,79,80,81,84,85,101,109,110,127,128,129,130,131,132,133,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,],[-66,-63,-64,-65,-41,-46,-48,-47,124,-43,124,124,-44,124,124,124,124,124,124,124,124,124,-49,-59,124,124,-60,124,-57,-52,124,-50,124,124,-51,-58,-53,-34,-42,124,124,]),'$end':([1,3,4,7,10,16,74,77,],[-2,-1,0,-76,-75,-5,-3,-4,]),'E_LOGICO':([28,29,31,32,66,79,80,81,84,85,101,109,110,127,128,129,130,131,132,133,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,],[-66,-63,-64,-65,-41,-46,-48,-47,112,-43,112,112,-44,112,112,112,112,112,112,112,112,112,-49,-59,-62,112,-60,112,-57,-52,-56,-50,-55,112,-51,-58,-53,-34,-42,112,112,]),'STRING':([0,1,7,14,16,19,35,39,43,44,74,77,163,165,175,176,],[6,-2,6,6,-5,6,6,6,6,6,-3,-4,6,6,6,6,]),'FOR':([16,39,43,44,45,46,52,57,58,62,63,65,68,69,71,82,86,105,106,120,126,135,163,165,170,172,175,176,179,180,],[-5,-85,-85,-85,-72,61,-71,-21,-17,-19,61,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-85,-85,-27,-25,-85,-85,-28,-26,]),'TERN_IF':([28,29,31,32,66,79,80,81,84,85,101,109,110,127,128,129,130,131,132,133,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,],[-66,-63,-64,-65,-41,-46,-48,-47,115,-43,115,115,-44,115,115,115,115,115,115,115,115,115,-49,-59,-62,-61,-60,115,-57,-52,-56,-50,-55,115,-51,-58,-53,-34,-42,115,115,]),'TIMES':([28,29,31,32,66,79,80,81,84,85,101,109,110,127,128,129,130,131,132,133,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,],[-66,-63,-64,-65,-41,-46,-48,-47,117,-43,117,117,-44,117,117,117,117,117,117,117,117,117,-49,117,117,117,117,117,117,-52,117,117,117,117,117,117,-53,-34,-42,117,117,]),'WRITE':([16,39,43,44,45,46,52,57,58,62,63,65,68,69,71,82,86,105,106,120,126,135,163,165,170,172,175,176,179,180,],[-5,-85,-85,-85,-72,64,-71,-21,-17,-19,64,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-85,-85,-27,-25,-85,-85,-28,-26,]),'TERN_ELSE':([28,29,31,32,66,79,80,81,85,110,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,166,],[-66,-63,-64,-65,-41,-46,-48,-47,-43,-44,-49,-59,-62,-61,-60,162,-57,-52,-56,-50,-55,-54,-51,-58,-53,-34,-42,-45,]),'PONTOVIRGULA':([11,12,13,25,26,28,29,30,31,32,37,53,54,64,66,70,73,79,80,81,84,85,87,88,98,99,100,101,107,110,128,129,130,131,132,133,134,141,142,143,144,145,147,148,149,150,151,152,153,154,155,158,159,160,164,166,],[-74,16,-6,-73,-6,-66,-63,-7,-64,-65,-8,82,86,-85,-41,105,106,-46,-48,-47,120,-43,126,-41,-81,-82,135,-84,-9,-44,-39,-35,-40,-36,-38,-37,157,-49,-59,-62,-61,-60,-57,-52,-56,-50,-55,-54,-51,-58,-53,-83,-34,-42,168,-45,]),'MULT_ATRIB':([59,66,88,160,],[94,-41,-41,-42,]),'NEGACAO':([53,64,78,83,89,90,91,92,93,94,95,102,103,104,111,112,113,114,115,116,117,118,119,121,122,123,124,125,136,157,162,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'ELSE':([172,],[174,]),'DECREMENTO':([59,66,88,160,],[95,-41,-41,-42,]),'ID':([0,1,2,5,6,7,8,15,16,24,39,43,44,45,46,47,52,53,55,57,58,62,63,64,65,68,69,71,74,77,78,82,83,86,89,90,91,92,93,94,95,96,102,103,104,105,106,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,135,136,157,162,163,165,168,170,172,175,176,179,180,],[9,-2,-10,-12,-11,9,13,26,-5,36,-85,-85,-85,-72,66,26,-71,66,88,-21,-17,-19,66,66,-20,-22,-16,-18,-3,-4,66,-32,66,-24,66,66,66,66,66,66,66,88,66,66,66,-29,-23,66,66,66,66,66,66,66,66,66,-33,66,66,66,66,66,-30,-31,66,66,66,-85,-85,88,-27,-25,-85,-85,-28,-26,]),'IF':([16,39,43,44,45,46,52,57,58,62,63,65,68,69,71,82,86,105,106,120,126,135,163,165,170,172,175,176,179,180,],[-5,-85,-85,-85,-72,67,-71,-21,-17,-19,67,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-85,-85,-27,-25,-85,-85,-28,-26,]),'FALSE':([18,50,53,64,78,83,89,90,91,92,93,94,95,102,103,104,108,111,112,113,114,115,116,117,118,119,121,122,123,124,125,136,157,162,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'IGUAL_ATRIB':([13,26,37,59,66,88,160,],[18,18,42,91,-41,-41,-42,]),'OU_LOGICO':([28,29,31,32,66,79,80,81,84,85,101,109,110,127,128,129,130,131,132,133,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,],[-66,-63,-64,-65,-41,-46,-48,-47,113,-43,113,113,-44,113,113,113,113,113,113,113,113,113,-49,-59,-62,-61,-60,113,-57,-52,-56,-50,-55,113,-51,-58,-53,-34,-42,113,113,]),'INT':([0,1,7,14,16,19,35,39,43,44,74,77,163,165,175,176,],[2,-2,2,2,-5,2,2,2,2,2,-3,-4,2,2,2,2,]),'BREAK':([16,39,43,44,45,46,52,57,58,62,63,65,68,69,71,82,86,105,106,120,126,135,163,165,170,172,175,176,179,180,],[-5,-85,-85,-85,-72,70,-71,-21,-17,-19,70,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-85,-85,-27,-25,-85,-85,-28,-26,]),'MENOR':([28,29,31,32,66,79,80,81,84,85,101,109,110,127,128,129,130,131,132,133,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,],[-66,-63,-64,-65,-41,-46,-48,-47,116,-43,116,116,-44,116,116,116,116,116,116,116,116,116,-49,-59,116,116,-60,116,-57,-52,116,-50,116,116,-51,-58,-53,-34,-42,116,116,]),'BOOL':([0,1,7,14,16,19,35,39,43,44,74,77,163,165,175,176,],[5,-2,5,5,-5,5,5,5,5,5,-3,-4,5,5,5,5,]),'RCOL':([27,28,29,31,32,41,66,79,80,81,85,110,138,141,142,143,144,145,147,148,149,150,151,152,153,154,155,159,160,166,],[37,-66,-63,-64,-65,49,-41,-46,-48,-47,-43,-44,160,-49,-59,-62,-61,-60,-57,-52,-56,-50,-55,-54,-51,-58,-53,-34,-42,-45,]),'MOD':([28,29,31,32,66,79,80,81,84,85,101,109,110,127,128,129,130,131,132,133,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,],[-66,-63,-64,-65,-41,-46,-48,-47,122,-43,122,122,-44,122,122,122,122,122,122,122,122,122,-49,-59,-62,-61,-60,122,-57,-52,-56,-50,-55,122,-51,-58,-53,-34,-42,122,122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'subCall':([46,53,63,64,78,83,89,90,91,92,93,94,95,102,103,104,111,112,113,114,115,116,117,118,119,121,122,123,124,125,136,157,162,],[54,79,54,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'readStmt':([46,63,],[57,57,]),'param':([14,19,35,],[22,22,22,]),'whileStmt':([46,63,],[58,58,]),'literal':([18,50,53,64,78,83,89,90,91,92,93,94,95,102,103,104,108,111,112,113,114,115,116,117,118,119,121,122,123,124,125,136,157,162,],[30,76,80,80,80,80,80,80,80,80,80,80,80,80,80,80,76,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'program':([0,],[4,]),'expSeq':([64,102,136,],[98,98,158,]),'paramList':([14,19,],[21,33,]),'var':([46,53,55,63,64,78,83,89,90,91,92,93,94,95,96,102,103,104,111,112,113,114,115,116,117,118,119,121,122,123,124,125,136,157,162,168,],[59,81,87,59,81,81,81,81,81,81,81,81,81,81,59,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,59,]),'expList':([64,102,],[100,137,]),'type':([0,7,14,19,35,39,43,44,163,165,175,176,],[8,8,24,24,24,47,47,47,47,47,47,47,]),'empty':([14,19,39,43,44,46,63,64,102,163,165,175,176,],[23,23,45,45,45,60,60,99,99,45,45,45,45,]),'paramSeq':([14,19,35,],[20,20,40,]),'decSeq':([0,7,],[3,10,]),'exp':([53,64,78,83,89,90,91,92,93,94,95,102,103,104,111,112,113,114,115,116,117,118,119,121,122,123,124,125,136,157,162,],[84,101,109,110,127,128,129,130,131,132,133,101,138,139,142,143,144,145,146,147,148,149,150,151,152,153,154,155,101,164,166,]),'breakStmt':([46,63,],[62,62,]),'varDec':([0,7,39,43,44,163,165,175,176,],[1,1,44,44,44,44,44,44,44,]),'stmt':([46,63,],[63,63,]),'varSpec':([8,15,47,],[11,11,11,]),'returnStmt':([46,63,],[65,65,]),'varDecList':([39,43,44,163,165,175,176,],[46,46,52,46,46,46,46,]),'writeStmt':([46,63,],[68,68,]),'assign':([46,63,96,168,],[73,73,134,171,]),'opBinaria':([53,64,78,83,89,90,91,92,93,94,95,102,103,104,111,112,113,114,115,116,117,118,119,121,122,123,124,125,136,157,162,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'forStmt':([46,63,],[71,71,]),'stmtList':([46,63,],[72,97,]),'literalSeq':([50,108,],[75,140,]),'varSpecSeq':([8,15,47,],[12,25,12,]),'dec':([0,7,],[7,7,]),'ifStmt':([46,63,],[69,69,]),'block':([39,43,163,165,175,176,],[48,51,167,169,177,178,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> decSeq','program',1,'p_program','analisador_sintatico.py',46),
  ('dec -> varDec','dec',1,'p_dec','analisador_sintatico.py',53),
  ('dec -> ID LPAREN paramList RPAREN LCHAVES block RCHAVES','dec',7,'p_dec','analisador_sintatico.py',54),
  ('dec -> type ID LPAREN paramList RPAREN LCHAVES block RCHAVES','dec',8,'p_dec','analisador_sintatico.py',55),
  ('varDec -> type varSpecSeq PONTOVIRGULA','varDec',3,'p_varDec','analisador_sintatico.py',71),
  ('varSpec -> ID','varSpec',1,'p_varSpec','analisador_sintatico.py',79),
  ('varSpec -> ID IGUAL_ATRIB literal','varSpec',3,'p_varSpec','analisador_sintatico.py',80),
  ('varSpec -> ID LCOL NUMBER RCOL','varSpec',4,'p_varSpec','analisador_sintatico.py',81),
  ('varSpec -> ID LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES','varSpec',8,'p_varSpec','analisador_sintatico.py',82),
  ('type -> INT','type',1,'p_type','analisador_sintatico.py',101),
  ('type -> STRING','type',1,'p_type','analisador_sintatico.py',102),
  ('type -> BOOL','type',1,'p_type','analisador_sintatico.py',103),
  ('param -> type ID','param',2,'p_param','analisador_sintatico.py',114),
  ('param -> type ID LCOL RCOL','param',4,'p_param','analisador_sintatico.py',115),
  ('block -> varDecList stmtList','block',2,'p_block','analisador_sintatico.py',128),
  ('stmt -> ifStmt','stmt',1,'p_stmt','analisador_sintatico.py',136),
  ('stmt -> whileStmt','stmt',1,'p_stmt','analisador_sintatico.py',137),
  ('stmt -> forStmt','stmt',1,'p_stmt','analisador_sintatico.py',138),
  ('stmt -> breakStmt','stmt',1,'p_stmt','analisador_sintatico.py',139),
  ('stmt -> returnStmt','stmt',1,'p_stmt','analisador_sintatico.py',140),
  ('stmt -> readStmt','stmt',1,'p_stmt','analisador_sintatico.py',141),
  ('stmt -> writeStmt','stmt',1,'p_stmt','analisador_sintatico.py',142),
  ('stmt -> assign PONTOVIRGULA','stmt',2,'p_stmt','analisador_sintatico.py',143),
  ('stmt -> subCall PONTOVIRGULA','stmt',2,'p_stmt','analisador_sintatico.py',144),
  ('ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES','ifStmt',7,'p_ifStmt','analisador_sintatico.py',164),
  ('ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES','ifStmt',11,'p_ifStmt','analisador_sintatico.py',165),
  ('whileStmt -> WHILE LPAREN exp RPAREN LCHAVES block RCHAVES','whileStmt',7,'p_whileStmt','analisador_sintatico.py',178),
  ('forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES','forStmt',11,'p_forStmt','analisador_sintatico.py',186),
  ('breakStmt -> BREAK PONTOVIRGULA','breakStmt',2,'p_breakStmt','analisador_sintatico.py',194),
  ('readStmt -> READ var PONTOVIRGULA','readStmt',3,'p_readStmt','analisador_sintatico.py',202),
  ('writeStmt -> WRITE expList PONTOVIRGULA','writeStmt',3,'p_writeStmt','analisador_sintatico.py',210),
  ('returnStmt -> RETURN PONTOVIRGULA','returnStmt',2,'p_returnStmt','analisador_sintatico.py',218),
  ('returnStmt -> RETURN exp PONTOVIRGULA','returnStmt',3,'p_returnStmt','analisador_sintatico.py',219),
  ('subCall -> ID LPAREN expList RPAREN','subCall',4,'p_subCall','analisador_sintatico.py',231),
  ('assign -> var IGUAL_ATRIB exp','assign',3,'p_assign','analisador_sintatico.py',239),
  ('assign -> var INCREMENTO exp','assign',3,'p_assign','analisador_sintatico.py',240),
  ('assign -> var DECREMENTO exp','assign',3,'p_assign','analisador_sintatico.py',241),
  ('assign -> var MULT_ATRIB exp','assign',3,'p_assign','analisador_sintatico.py',242),
  ('assign -> var DIV_ATRIB exp','assign',3,'p_assign','analisador_sintatico.py',243),
  ('assign -> var MOD_IGUAL exp','assign',3,'p_assign','analisador_sintatico.py',244),
  ('var -> ID','var',1,'p_var','analisador_sintatico.py',258),
  ('var -> ID LCOL exp RCOL','var',4,'p_var','analisador_sintatico.py',259),
  ('exp -> opBinaria','exp',1,'p_exp','analisador_sintatico.py',273),
  ('exp -> NEGACAO exp','exp',2,'p_exp','analisador_sintatico.py',274),
  ('exp -> exp TERN_IF exp TERN_ELSE exp','exp',5,'p_exp','analisador_sintatico.py',275),
  ('exp -> subCall','exp',1,'p_exp','analisador_sintatico.py',276),
  ('exp -> var','exp',1,'p_exp','analisador_sintatico.py',277),
  ('exp -> literal','exp',1,'p_exp','analisador_sintatico.py',278),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp','analisador_sintatico.py',279),
  ('opBinaria -> exp PLUS exp','opBinaria',3,'p_opBinaria','analisador_sintatico.py',314),
  ('opBinaria -> exp MINUS exp','opBinaria',3,'p_opBinaria','analisador_sintatico.py',315),
  ('opBinaria -> exp TIMES exp','opBinaria',3,'p_opBinaria','analisador_sintatico.py',316),
  ('opBinaria -> exp DIVIDE exp','opBinaria',3,'p_opBinaria','analisador_sintatico.py',317),
  ('opBinaria -> exp MOD exp','opBinaria',3,'p_opBinaria','analisador_sintatico.py',318),
  ('opBinaria -> exp IGUAL_COMP exp','opBinaria',3,'p_opBinaria','analisador_sintatico.py',319),
  ('opBinaria -> exp DIFERENTE exp','opBinaria',3,'p_opBinaria','analisador_sintatico.py',320),
  ('opBinaria -> exp MENOR exp','opBinaria',3,'p_opBinaria','analisador_sintatico.py',321),
  ('opBinaria -> exp MENOR_IGUAL exp','opBinaria',3,'p_opBinaria','analisador_sintatico.py',322),
  ('opBinaria -> exp MAIOR exp','opBinaria',3,'p_opBinaria','analisador_sintatico.py',323),
  ('opBinaria -> exp MAIOR_IGUAL exp','opBinaria',3,'p_opBinaria','analisador_sintatico.py',324),
  ('opBinaria -> exp OU_LOGICO exp','opBinaria',3,'p_opBinaria','analisador_sintatico.py',325),
  ('opBinaria -> exp E_LOGICO exp','opBinaria',3,'p_opBinaria','analisador_sintatico.py',326),
  ('literal -> NUMBER','literal',1,'p_literal','analisador_sintatico.py',331),
  ('literal -> CADEIA_CHAR','literal',1,'p_literal','analisador_sintatico.py',332),
  ('literal -> TRUE','literal',1,'p_literal','analisador_sintatico.py',333),
  ('literal -> FALSE','literal',1,'p_literal','analisador_sintatico.py',334),
  ('paramList -> paramSeq','paramList',1,'p_paramList','analisador_sintatico.py',346),
  ('paramList -> empty','paramList',1,'p_paramList','analisador_sintatico.py',347),
  ('paramSeq -> param VIRGULA paramSeq','paramSeq',3,'p_paramSeq','analisador_sintatico.py',357),
  ('paramSeq -> param','paramSeq',1,'p_paramSeq','analisador_sintatico.py',358),
  ('varDecList -> varDec varDecList','varDecList',2,'p_varDecList','analisador_sintatico.py',371),
  ('varDecList -> empty','varDecList',1,'p_varDecList','analisador_sintatico.py',372),
  ('varSpecSeq -> varSpec VIRGULA varSpecSeq','varSpecSeq',3,'p_varSpecSeq','analisador_sintatico.py',385),
  ('varSpecSeq -> varSpec','varSpecSeq',1,'p_varSpecSeq','analisador_sintatico.py',386),
  ('decSeq -> dec decSeq','decSeq',2,'p_decSeq','analisador_sintatico.py',399),
  ('decSeq -> dec','decSeq',1,'p_decSeq','analisador_sintatico.py',400),
  ('stmtList -> stmt stmtList','stmtList',2,'p_stmtList','analisador_sintatico.py',414),
  ('stmtList -> empty','stmtList',1,'p_stmtList','analisador_sintatico.py',415),
  ('literalSeq -> literal VIRGULA literalSeq','literalSeq',3,'p_literalSeq','analisador_sintatico.py',429),
  ('literalSeq -> literal','literalSeq',1,'p_literalSeq','analisador_sintatico.py',430),
  ('expList -> expSeq','expList',1,'p_expList','analisador_sintatico.py',444),
  ('expList -> empty','expList',1,'p_expList','analisador_sintatico.py',445),
  ('expSeq -> exp VIRGULA expSeq','expSeq',3,'p_expSeq','analisador_sintatico.py',455),
  ('expSeq -> exp','expSeq',1,'p_expSeq','analisador_sintatico.py',456),
  ('empty -> <empty>','empty',0,'p_empty','analisador_sintatico.py',469),
]


# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightTERN_IFleftOU_LOGICOleftE_LOGICOleftIGUAL_COMPDIFERENTEleftMAIORMAIOR_IGUALMENORMENOR_IGUALleftPLUSMINUSleftTIMESDIVIDEleftNEGACAOINVERTESINALID LPAREN RPAREN LCOL RCOL LCHAVES RCHAVES VIRGULA PONTOVIRGULA NUMBER PLUS MINUS TIMES DIVIDE MOD IGUAL_COMP DIFERENTE MAIOR MAIOR_IGUAL MENOR MENOR_IGUAL OU_LOGICO E_LOGICO NEGACAO INVERTESINAL IGUAL_ATRIB INCREMENTO DECREMENTO MULT_ATRIB DIV_ATRIB MOD_IGUAL TERN_IF TERN_ELSE CADEIA_CHAR FALSE STRING INT ELSE BREAK RETURN TRUE IF FOR WRITE READ WHILE BOOLprogram : decSeqdec : varDec\n\t\t   | ID LPAREN paramList RPAREN LCHAVES block RCHAVES\n\t\t   | type ID LPAREN paramList RPAREN LCHAVES block RCHAVES\n\tvarDec : type varSpecSeq PONTOVIRGULAvarSpec : ID\n\t\t\t   | ID IGUAL_ATRIB literal\n\t\t\t   | ID LCOL NUMBER RCOL\n\t\t\t   | ID LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES\n\ttype : INT\n\t\t\t| STRING\n\t\t\t| BOOL\n\tparam : type ID\n\t\t\t | type ID LCOL RCOL\n\tblock : varDecList stmtList stmt : ifStmt\n\t\t\t | whileStmt\n\t\t\t | forStmt\n\t\t\t | breakStmt\n\t\t\t | returnStmt\n\t\t\t | readStmt\n\t\t\t | writeStmt\n\t\t\t | assign PONTOVIRGULA\n\t\t\t | subCall PONTOVIRGULA\n\t ifStmt : IF LPAREN exp RPAREN LCHAVES block RCHAVES\n\t\t\t   | IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES\n\t whileStmt : WHILE LPAREN exp RPAREN LCHAVES block RCHAVES forStmt : FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVESbreakStmt : BREAK PONTOVIRGULAreadStmt : READ var PONTOVIRGULAwriteStmt : WRITE expList PONTOVIRGULAreturnStmt : RETURN PONTOVIRGULA\n\t\t\t\t  | RETURN exp PONTOVIRGULA\n\tsubCall : ID LPAREN expList RPARENassign : var IGUAL_ATRIB exp\n\t\t\t  | var INCREMENTO exp\n\t\t\t  | var DECREMENTO exp\n\t\t\t  | var MULT_ATRIB exp\n\t\t\t  | var DIV_ATRIB exp\n\t\t\t  | var MOD_IGUAL exp\n\tvar : ID\n   \t\t   | ID LCOL exp RCOL\n\texp : exp PLUS exp\n\t\t   | exp MINUS exp\n\t\t   | exp TIMES exp\n\t\t   | exp DIVIDE exp\n\t\t   | exp MOD exp\n\t\t   | exp IGUAL_COMP exp\n\t\t   | exp DIFERENTE exp\n\t\t   | exp MENOR exp\n\t\t   | exp MENOR_IGUAL exp\n\t\t   | exp MAIOR exp\n\t\t   | exp MAIOR_IGUAL exp\n\t\t   | exp OU_LOGICO exp\n\t\t   | exp E_LOGICO exp\n\t\t   | NEGACAO exp\n\t\t   | INVERTESINAL exp\n\t\t   | exp TERN_IF exp TERN_ELSE exp\n\t\t   | subCall\n\t\t   | var\n\t\t   | literal\n\t\t   | LPAREN exp RPAREN\n\t literal : NUMBER\n\t\t\t\t| CADEIA_CHAR\n\t\t\t\t| TRUE\n\t            | FALSE\n\tparamList : paramSeq\n\t\t\t\t | empty\n\tparamSeq : param VIRGULA paramSeq\n\t\t\t\t| param\n\tvarDecList : varDec varDecList\n\t\t\t\t  | empty\n\tvarSpecSeq : varSpec VIRGULA varSpecSeq\n\t\t\t\t  | varSpec\n\tdecSeq : dec decSeq\n\t\t\t  | dec\n\tstmtList : stmt stmtList\n\t\t\t\t| empty\n\tliteralSeq : literal VIRGULA literalSeq\n\t\t\t\t  | literal\n\texpList : expSeq\n\t\t\t   | empty\n\texpSeq : exp VIRGULA expSeq\n\t\t\t  | exp\n\tempty :'
    
_lr_action_items = {'RETURN':([16,39,43,44,45,46,52,57,58,62,63,65,68,69,71,82,86,105,106,121,127,136,164,166,171,173,176,177,180,181,],[-5,-85,-85,-85,-72,53,-71,-21,-17,-19,53,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-85,-85,-27,-25,-85,-85,-28,-26,]),'LPAREN':([9,13,53,56,61,64,66,67,81,83,84,89,90,91,92,93,94,95,102,103,104,112,113,114,115,116,117,118,119,120,122,123,124,125,126,137,158,163,],[14,19,83,89,96,83,102,104,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'READ':([16,39,43,44,45,46,52,57,58,62,63,65,68,69,71,82,86,105,106,121,127,136,164,166,171,173,176,177,180,181,],[-5,-85,-85,-85,-72,55,-71,-21,-17,-19,55,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-85,-85,-27,-25,-85,-85,-28,-26,]),'NUMBER':([17,18,50,53,64,81,83,84,89,90,91,92,93,94,95,102,103,104,108,112,113,114,115,116,117,118,119,120,122,123,124,125,126,137,158,163,],[27,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'MOD_IGUAL':([59,66,88,161,],[92,-41,-41,-42,]),'DIFERENTE':([28,29,31,32,66,78,79,80,85,101,109,110,111,128,129,130,131,132,133,134,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,165,167,],[-66,-63,-64,-65,-41,-59,-61,-60,118,118,-57,118,-56,118,118,118,118,118,118,118,118,118,-62,118,118,-53,118,-52,-45,-49,-50,-43,-48,118,-44,-51,-46,-34,-42,118,118,]),'WHILE':([16,39,43,44,45,46,52,57,58,62,63,65,68,69,71,82,86,105,106,121,127,136,164,166,171,173,176,177,180,181,],[-5,-85,-85,-85,-72,56,-71,-21,-17,-19,56,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-85,-85,-27,-25,-85,-85,-28,-26,]),'CADEIA_CHAR':([18,50,53,64,81,83,84,89,90,91,92,93,94,95,102,103,104,108,112,113,114,115,116,117,118,119,120,122,123,124,125,126,137,158,163,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'TRUE':([18,50,53,64,81,83,84,89,90,91,92,93,94,95,102,103,104,108,112,113,114,115,116,117,118,119,120,122,123,124,125,126,137,158,163,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'MINUS':([28,29,31,32,66,78,79,80,85,101,109,110,111,128,129,130,131,132,133,134,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,165,167,],[-66,-63,-64,-65,-41,-59,-61,-60,124,124,-57,124,-56,124,124,124,124,124,124,124,124,124,-62,124,124,124,124,124,-45,124,124,-43,124,124,-44,124,-46,-34,-42,124,124,]),'DIVIDE':([28,29,31,32,66,78,79,80,85,101,109,110,111,128,129,130,131,132,133,134,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,165,167,],[-66,-63,-64,-65,-41,-59,-61,-60,126,126,-57,126,-56,126,126,126,126,126,126,126,126,126,-62,126,126,126,126,126,-45,126,126,126,126,126,126,126,-46,-34,-42,126,126,]),'DIV_ATRIB':([59,66,88,161,],[90,-41,-41,-42,]),'RPAREN':([14,19,20,21,22,23,28,29,31,32,33,36,40,49,66,78,79,80,98,99,101,102,109,110,111,128,129,130,131,132,133,134,138,140,142,143,144,145,147,148,149,150,151,152,153,154,155,156,159,160,161,167,172,],[-85,-85,-67,34,-70,-68,-66,-63,-64,-65,38,-13,-69,-14,-41,-59,-61,-60,-81,-82,-84,-85,-57,142,-56,157,-39,-35,-40,-36,-38,-37,160,162,-62,-55,-54,-53,-52,-45,-49,-50,-43,-48,-47,-44,-51,-46,-83,-34,-42,-58,174,]),'VIRGULA':([11,13,22,26,28,29,30,31,32,36,37,49,66,76,78,79,80,101,107,109,111,142,143,144,145,147,148,149,150,151,152,153,154,155,156,160,161,167,],[15,-6,35,-6,-66,-63,-7,-64,-65,-13,-8,-14,-41,108,-59,-61,-60,137,-9,-57,-56,-62,-55,-54,-53,-52,-45,-49,-50,-43,-48,-47,-44,-51,-46,-34,-42,-58,]),'LCOL':([13,26,36,66,88,],[17,17,41,103,103,]),'MAIOR_IGUAL':([28,29,31,32,66,78,79,80,85,101,109,110,111,128,129,130,131,132,133,134,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,165,167,],[-66,-63,-64,-65,-41,-59,-61,-60,114,114,-57,114,-56,114,114,114,114,114,114,114,114,114,-62,114,114,-53,114,-52,-45,114,-50,-43,114,114,-44,-51,-46,-34,-42,114,114,]),'MAIOR':([28,29,31,32,66,78,79,80,85,101,109,110,111,128,129,130,131,132,133,134,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,165,167,],[-66,-63,-64,-65,-41,-59,-61,-60,116,116,-57,116,-56,116,116,116,116,116,116,116,116,116,-62,116,116,-53,116,-52,-45,116,-50,-43,116,116,-44,-51,-46,-34,-42,116,116,]),'PLUS':([28,29,31,32,66,78,79,80,85,101,109,110,111,128,129,130,131,132,133,134,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,165,167,],[-66,-63,-64,-65,-41,-59,-61,-60,120,120,-57,120,-56,120,120,120,120,120,120,120,120,120,-62,120,120,120,120,120,-45,120,120,-43,120,120,-44,120,-46,-34,-42,120,120,]),'RCHAVES':([16,28,29,31,32,39,43,44,45,46,48,51,52,57,58,60,62,63,65,68,69,71,72,75,76,82,86,97,105,106,121,127,136,141,164,166,168,170,171,173,176,177,178,179,180,181,],[-5,-66,-63,-64,-65,-85,-85,-85,-72,-85,74,77,-71,-21,-17,-78,-19,-85,-20,-22,-16,-18,-15,107,-80,-32,-24,-77,-29,-23,-33,-30,-31,-79,-85,-85,171,173,-27,-25,-85,-85,180,181,-28,-26,]),'LCHAVES':([34,38,42,157,162,174,175,],[39,43,50,164,166,176,177,]),'INCREMENTO':([59,66,88,161,],[93,-41,-41,-42,]),'IGUAL_COMP':([28,29,31,32,66,78,79,80,85,101,109,110,111,128,129,130,131,132,133,134,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,165,167,],[-66,-63,-64,-65,-41,-59,-61,-60,122,122,-57,122,-56,122,122,122,122,122,122,122,122,122,-62,122,122,-53,122,-52,-45,-49,-50,-43,-48,122,-44,-51,-46,-34,-42,122,122,]),'MENOR_IGUAL':([28,29,31,32,66,78,79,80,85,101,109,110,111,128,129,130,131,132,133,134,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,165,167,],[-66,-63,-64,-65,-41,-59,-61,-60,125,125,-57,125,-56,125,125,125,125,125,125,125,125,125,-62,125,125,-53,125,-52,-45,125,-50,-43,125,125,-44,-51,-46,-34,-42,125,125,]),'INVERTESINAL':([53,64,81,83,84,89,90,91,92,93,94,95,102,103,104,112,113,114,115,116,117,118,119,120,122,123,124,125,126,137,158,163,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'$end':([1,3,4,7,10,16,74,77,],[-2,-1,0,-76,-75,-5,-3,-4,]),'E_LOGICO':([28,29,31,32,66,78,79,80,85,101,109,110,111,128,129,130,131,132,133,134,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,165,167,],[-66,-63,-64,-65,-41,-59,-61,-60,112,112,-57,112,-56,112,112,112,112,112,112,112,112,112,-62,-55,112,-53,112,-52,-45,-49,-50,-43,-48,112,-44,-51,-46,-34,-42,112,112,]),'STRING':([0,1,7,14,16,19,35,39,43,44,74,77,164,166,176,177,],[6,-2,6,6,-5,6,6,6,6,6,-3,-4,6,6,6,6,]),'FOR':([16,39,43,44,45,46,52,57,58,62,63,65,68,69,71,82,86,105,106,121,127,136,164,166,171,173,176,177,180,181,],[-5,-85,-85,-85,-72,61,-71,-21,-17,-19,61,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-85,-85,-27,-25,-85,-85,-28,-26,]),'TERN_IF':([28,29,31,32,66,78,79,80,85,101,109,110,111,128,129,130,131,132,133,134,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,165,167,],[-66,-63,-64,-65,-41,-59,-61,-60,115,115,-57,115,-56,115,115,115,115,115,115,115,115,115,-62,-55,-54,-53,115,-52,-45,-49,-50,-43,-48,115,-44,-51,-46,-34,-42,115,115,]),'TIMES':([28,29,31,32,66,78,79,80,85,101,109,110,111,128,129,130,131,132,133,134,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,165,167,],[-66,-63,-64,-65,-41,-59,-61,-60,117,117,-57,117,-56,117,117,117,117,117,117,117,117,117,-62,117,117,117,117,117,-45,117,117,117,117,117,117,117,-46,-34,-42,117,117,]),'WRITE':([16,39,43,44,45,46,52,57,58,62,63,65,68,69,71,82,86,105,106,121,127,136,164,166,171,173,176,177,180,181,],[-5,-85,-85,-85,-72,64,-71,-21,-17,-19,64,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-85,-85,-27,-25,-85,-85,-28,-26,]),'TERN_ELSE':([28,29,31,32,66,78,79,80,109,111,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,167,],[-66,-63,-64,-65,-41,-59,-61,-60,-57,-56,-62,-55,-54,-53,163,-52,-45,-49,-50,-43,-48,-47,-44,-51,-46,-34,-42,-58,]),'PONTOVIRGULA':([11,12,13,25,26,28,29,30,31,32,37,53,54,64,66,70,73,78,79,80,85,87,88,98,99,100,101,107,109,111,129,130,131,132,133,134,135,142,143,144,145,147,148,149,150,151,152,153,154,155,156,159,160,161,165,167,],[-74,16,-6,-73,-6,-66,-63,-7,-64,-65,-8,82,86,-85,-41,105,106,-59,-61,-60,121,127,-41,-81,-82,136,-84,-9,-57,-56,-39,-35,-40,-36,-38,-37,158,-62,-55,-54,-53,-52,-45,-49,-50,-43,-48,-47,-44,-51,-46,-83,-34,-42,169,-58,]),'MULT_ATRIB':([59,66,88,161,],[94,-41,-41,-42,]),'NEGACAO':([53,64,81,83,84,89,90,91,92,93,94,95,102,103,104,112,113,114,115,116,117,118,119,120,122,123,124,125,126,137,158,163,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'ELSE':([173,],[175,]),'DECREMENTO':([59,66,88,161,],[95,-41,-41,-42,]),'ID':([0,1,2,5,6,7,8,15,16,24,39,43,44,45,46,47,52,53,55,57,58,62,63,64,65,68,69,71,74,77,81,82,83,84,86,89,90,91,92,93,94,95,96,102,103,104,105,106,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,136,137,158,163,164,166,169,171,173,176,177,180,181,],[9,-2,-10,-12,-11,9,13,26,-5,36,-85,-85,-85,-72,66,26,-71,66,88,-21,-17,-19,66,66,-20,-22,-16,-18,-3,-4,66,-32,66,66,-24,66,66,66,66,66,66,66,88,66,66,66,-29,-23,66,66,66,66,66,66,66,66,66,-33,66,66,66,66,66,-30,-31,66,66,66,-85,-85,88,-27,-25,-85,-85,-28,-26,]),'IF':([16,39,43,44,45,46,52,57,58,62,63,65,68,69,71,82,86,105,106,121,127,136,164,166,171,173,176,177,180,181,],[-5,-85,-85,-85,-72,67,-71,-21,-17,-19,67,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-85,-85,-27,-25,-85,-85,-28,-26,]),'FALSE':([18,50,53,64,81,83,84,89,90,91,92,93,94,95,102,103,104,108,112,113,114,115,116,117,118,119,120,122,123,124,125,126,137,158,163,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'IGUAL_ATRIB':([13,26,37,59,66,88,161,],[18,18,42,91,-41,-41,-42,]),'OU_LOGICO':([28,29,31,32,66,78,79,80,85,101,109,110,111,128,129,130,131,132,133,134,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,165,167,],[-66,-63,-64,-65,-41,-59,-61,-60,113,113,-57,113,-56,113,113,113,113,113,113,113,113,113,-62,-55,-54,-53,113,-52,-45,-49,-50,-43,-48,113,-44,-51,-46,-34,-42,113,113,]),'INT':([0,1,7,14,16,19,35,39,43,44,74,77,164,166,176,177,],[2,-2,2,2,-5,2,2,2,2,2,-3,-4,2,2,2,2,]),'BREAK':([16,39,43,44,45,46,52,57,58,62,63,65,68,69,71,82,86,105,106,121,127,136,164,166,171,173,176,177,180,181,],[-5,-85,-85,-85,-72,70,-71,-21,-17,-19,70,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-85,-85,-27,-25,-85,-85,-28,-26,]),'MENOR':([28,29,31,32,66,78,79,80,85,101,109,110,111,128,129,130,131,132,133,134,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,165,167,],[-66,-63,-64,-65,-41,-59,-61,-60,119,119,-57,119,-56,119,119,119,119,119,119,119,119,119,-62,119,119,-53,119,-52,-45,119,-50,-43,119,119,-44,-51,-46,-34,-42,119,119,]),'BOOL':([0,1,7,14,16,19,35,39,43,44,74,77,164,166,176,177,],[5,-2,5,5,-5,5,5,5,5,5,-3,-4,5,5,5,5,]),'RCOL':([27,28,29,31,32,41,66,78,79,80,109,111,139,142,143,144,145,147,148,149,150,151,152,153,154,155,156,160,161,167,],[37,-66,-63,-64,-65,49,-41,-59,-61,-60,-57,-56,161,-62,-55,-54,-53,-52,-45,-49,-50,-43,-48,-47,-44,-51,-46,-34,-42,-58,]),'MOD':([28,29,31,32,66,78,79,80,85,101,109,110,111,128,129,130,131,132,133,134,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,165,167,],[-66,-63,-64,-65,-41,-59,-61,-60,123,123,-57,123,-56,123,123,123,123,123,123,123,123,123,-62,-55,-54,-53,123,-52,-45,-49,-50,-43,-48,123,-44,-51,-46,-34,-42,123,123,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'subCall':([46,53,63,64,81,83,84,89,90,91,92,93,94,95,102,103,104,112,113,114,115,116,117,118,119,120,122,123,124,125,126,137,158,163,],[54,78,54,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'readStmt':([46,63,],[57,57,]),'param':([14,19,35,],[22,22,22,]),'whileStmt':([46,63,],[58,58,]),'literal':([18,50,53,64,81,83,84,89,90,91,92,93,94,95,102,103,104,108,112,113,114,115,116,117,118,119,120,122,123,124,125,126,137,158,163,],[30,76,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,76,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'program':([0,],[4,]),'expSeq':([64,102,137,],[98,98,159,]),'paramList':([14,19,],[21,33,]),'var':([46,53,55,63,64,81,83,84,89,90,91,92,93,94,95,96,102,103,104,112,113,114,115,116,117,118,119,120,122,123,124,125,126,137,158,163,169,],[59,80,87,59,80,80,80,80,80,80,80,80,80,80,80,59,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,59,]),'expList':([64,102,],[100,138,]),'type':([0,7,14,19,35,39,43,44,164,166,176,177,],[8,8,24,24,24,47,47,47,47,47,47,47,]),'empty':([14,19,39,43,44,46,63,64,102,164,166,176,177,],[23,23,45,45,45,60,60,99,99,45,45,45,45,]),'paramSeq':([14,19,35,],[20,20,40,]),'decSeq':([0,7,],[3,10,]),'exp':([53,64,81,83,84,89,90,91,92,93,94,95,102,103,104,112,113,114,115,116,117,118,119,120,122,123,124,125,126,137,158,163,],[85,101,109,110,111,128,129,130,131,132,133,134,101,139,140,143,144,145,146,147,148,149,150,151,152,153,154,155,156,101,165,167,]),'breakStmt':([46,63,],[62,62,]),'varDec':([0,7,39,43,44,164,166,176,177,],[1,1,44,44,44,44,44,44,44,]),'stmt':([46,63,],[63,63,]),'varSpec':([8,15,47,],[11,11,11,]),'returnStmt':([46,63,],[65,65,]),'varDecList':([39,43,44,164,166,176,177,],[46,46,52,46,46,46,46,]),'writeStmt':([46,63,],[68,68,]),'assign':([46,63,96,169,],[73,73,135,172,]),'forStmt':([46,63,],[71,71,]),'stmtList':([46,63,],[72,97,]),'literalSeq':([50,108,],[75,141,]),'varSpecSeq':([8,15,47,],[12,25,12,]),'dec':([0,7,],[7,7,]),'ifStmt':([46,63,],[69,69,]),'block':([39,43,164,166,176,177,],[48,51,168,170,178,179,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> decSeq','program',1,'p_program','analisador_sintatico.py',46),
  ('dec -> varDec','dec',1,'p_dec','analisador_sintatico.py',53),
  ('dec -> ID LPAREN paramList RPAREN LCHAVES block RCHAVES','dec',7,'p_dec','analisador_sintatico.py',54),
  ('dec -> type ID LPAREN paramList RPAREN LCHAVES block RCHAVES','dec',8,'p_dec','analisador_sintatico.py',55),
  ('varDec -> type varSpecSeq PONTOVIRGULA','varDec',3,'p_varDec','analisador_sintatico.py',71),
  ('varSpec -> ID','varSpec',1,'p_varSpec','analisador_sintatico.py',79),
  ('varSpec -> ID IGUAL_ATRIB literal','varSpec',3,'p_varSpec','analisador_sintatico.py',80),
  ('varSpec -> ID LCOL NUMBER RCOL','varSpec',4,'p_varSpec','analisador_sintatico.py',81),
  ('varSpec -> ID LCOL NUMBER RCOL IGUAL_ATRIB LCHAVES literalSeq RCHAVES','varSpec',8,'p_varSpec','analisador_sintatico.py',82),
  ('type -> INT','type',1,'p_type','analisador_sintatico.py',100),
  ('type -> STRING','type',1,'p_type','analisador_sintatico.py',101),
  ('type -> BOOL','type',1,'p_type','analisador_sintatico.py',102),
  ('param -> type ID','param',2,'p_param','analisador_sintatico.py',113),
  ('param -> type ID LCOL RCOL','param',4,'p_param','analisador_sintatico.py',114),
  ('block -> varDecList stmtList','block',2,'p_block','analisador_sintatico.py',126),
  ('stmt -> ifStmt','stmt',1,'p_stmt','analisador_sintatico.py',133),
  ('stmt -> whileStmt','stmt',1,'p_stmt','analisador_sintatico.py',134),
  ('stmt -> forStmt','stmt',1,'p_stmt','analisador_sintatico.py',135),
  ('stmt -> breakStmt','stmt',1,'p_stmt','analisador_sintatico.py',136),
  ('stmt -> returnStmt','stmt',1,'p_stmt','analisador_sintatico.py',137),
  ('stmt -> readStmt','stmt',1,'p_stmt','analisador_sintatico.py',138),
  ('stmt -> writeStmt','stmt',1,'p_stmt','analisador_sintatico.py',139),
  ('stmt -> assign PONTOVIRGULA','stmt',2,'p_stmt','analisador_sintatico.py',140),
  ('stmt -> subCall PONTOVIRGULA','stmt',2,'p_stmt','analisador_sintatico.py',141),
  ('ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES','ifStmt',7,'p_ifStmt','analisador_sintatico.py',159),
  ('ifStmt -> IF LPAREN exp RPAREN LCHAVES block RCHAVES ELSE LCHAVES block RCHAVES','ifStmt',11,'p_ifStmt','analisador_sintatico.py',160),
  ('whileStmt -> WHILE LPAREN exp RPAREN LCHAVES block RCHAVES','whileStmt',7,'p_whileStmt','analisador_sintatico.py',167),
  ('forStmt -> FOR LPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign RPAREN LCHAVES block RCHAVES','forStmt',11,'p_forStmt','analisador_sintatico.py',173),
  ('breakStmt -> BREAK PONTOVIRGULA','breakStmt',2,'p_breakStmt','analisador_sintatico.py',178),
  ('readStmt -> READ var PONTOVIRGULA','readStmt',3,'p_readStmt','analisador_sintatico.py',183),
  ('writeStmt -> WRITE expList PONTOVIRGULA','writeStmt',3,'p_writeStmt','analisador_sintatico.py',188),
  ('returnStmt -> RETURN PONTOVIRGULA','returnStmt',2,'p_returnStmt','analisador_sintatico.py',193),
  ('returnStmt -> RETURN exp PONTOVIRGULA','returnStmt',3,'p_returnStmt','analisador_sintatico.py',194),
  ('subCall -> ID LPAREN expList RPAREN','subCall',4,'p_subCall','analisador_sintatico.py',201),
  ('assign -> var IGUAL_ATRIB exp','assign',3,'p_assign','analisador_sintatico.py',206),
  ('assign -> var INCREMENTO exp','assign',3,'p_assign','analisador_sintatico.py',207),
  ('assign -> var DECREMENTO exp','assign',3,'p_assign','analisador_sintatico.py',208),
  ('assign -> var MULT_ATRIB exp','assign',3,'p_assign','analisador_sintatico.py',209),
  ('assign -> var DIV_ATRIB exp','assign',3,'p_assign','analisador_sintatico.py',210),
  ('assign -> var MOD_IGUAL exp','assign',3,'p_assign','analisador_sintatico.py',211),
  ('var -> ID','var',1,'p_var','analisador_sintatico.py',222),
  ('var -> ID LCOL exp RCOL','var',4,'p_var','analisador_sintatico.py',223),
  ('exp -> exp PLUS exp','exp',3,'p_exp','analisador_sintatico.py',231),
  ('exp -> exp MINUS exp','exp',3,'p_exp','analisador_sintatico.py',232),
  ('exp -> exp TIMES exp','exp',3,'p_exp','analisador_sintatico.py',233),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp','analisador_sintatico.py',234),
  ('exp -> exp MOD exp','exp',3,'p_exp','analisador_sintatico.py',235),
  ('exp -> exp IGUAL_COMP exp','exp',3,'p_exp','analisador_sintatico.py',236),
  ('exp -> exp DIFERENTE exp','exp',3,'p_exp','analisador_sintatico.py',237),
  ('exp -> exp MENOR exp','exp',3,'p_exp','analisador_sintatico.py',238),
  ('exp -> exp MENOR_IGUAL exp','exp',3,'p_exp','analisador_sintatico.py',239),
  ('exp -> exp MAIOR exp','exp',3,'p_exp','analisador_sintatico.py',240),
  ('exp -> exp MAIOR_IGUAL exp','exp',3,'p_exp','analisador_sintatico.py',241),
  ('exp -> exp OU_LOGICO exp','exp',3,'p_exp','analisador_sintatico.py',242),
  ('exp -> exp E_LOGICO exp','exp',3,'p_exp','analisador_sintatico.py',243),
  ('exp -> NEGACAO exp','exp',2,'p_exp','analisador_sintatico.py',244),
  ('exp -> INVERTESINAL exp','exp',2,'p_exp','analisador_sintatico.py',245),
  ('exp -> exp TERN_IF exp TERN_ELSE exp','exp',5,'p_exp','analisador_sintatico.py',246),
  ('exp -> subCall','exp',1,'p_exp','analisador_sintatico.py',247),
  ('exp -> var','exp',1,'p_exp','analisador_sintatico.py',248),
  ('exp -> literal','exp',1,'p_exp','analisador_sintatico.py',249),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp','analisador_sintatico.py',250),
  ('literal -> NUMBER','literal',1,'p_literal','analisador_sintatico.py',275),
  ('literal -> CADEIA_CHAR','literal',1,'p_literal','analisador_sintatico.py',276),
  ('literal -> TRUE','literal',1,'p_literal','analisador_sintatico.py',277),
  ('literal -> FALSE','literal',1,'p_literal','analisador_sintatico.py',278),
  ('paramList -> paramSeq','paramList',1,'p_paramList','analisador_sintatico.py',288),
  ('paramList -> empty','paramList',1,'p_paramList','analisador_sintatico.py',289),
  ('paramSeq -> param VIRGULA paramSeq','paramSeq',3,'p_paramSeq','analisador_sintatico.py',296),
  ('paramSeq -> param','paramSeq',1,'p_paramSeq','analisador_sintatico.py',297),
  ('varDecList -> varDec varDecList','varDecList',2,'p_varDecList','analisador_sintatico.py',304),
  ('varDecList -> empty','varDecList',1,'p_varDecList','analisador_sintatico.py',305),
  ('varSpecSeq -> varSpec VIRGULA varSpecSeq','varSpecSeq',3,'p_varSpecSeq','analisador_sintatico.py',311),
  ('varSpecSeq -> varSpec','varSpecSeq',1,'p_varSpecSeq','analisador_sintatico.py',312),
  ('decSeq -> dec decSeq','decSeq',2,'p_decSeq','analisador_sintatico.py',319),
  ('decSeq -> dec','decSeq',1,'p_decSeq','analisador_sintatico.py',320),
  ('stmtList -> stmt stmtList','stmtList',2,'p_stmtList','analisador_sintatico.py',334),
  ('stmtList -> empty','stmtList',1,'p_stmtList','analisador_sintatico.py',335),
  ('literalSeq -> literal VIRGULA literalSeq','literalSeq',3,'p_literalSeq','analisador_sintatico.py',342),
  ('literalSeq -> literal','literalSeq',1,'p_literalSeq','analisador_sintatico.py',343),
  ('expList -> expSeq','expList',1,'p_expList','analisador_sintatico.py',350),
  ('expList -> empty','expList',1,'p_expList','analisador_sintatico.py',351),
  ('expSeq -> exp VIRGULA expSeq','expSeq',3,'p_expSeq','analisador_sintatico.py',358),
  ('expSeq -> exp','expSeq',1,'p_expSeq','analisador_sintatico.py',359),
  ('empty -> <empty>','empty',0,'p_empty','analisador_sintatico.py',365),
]
